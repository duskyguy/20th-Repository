/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.server.allGraphQLCases;

import com.graphql_java_generator.annotation.GraphQLInterfaceType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;




/**
 *  This interface is a clone of the AllFieldCases type. 
 *  Both should contains all possible combinations of parameters, data type, list, mandatory field or items...
 * <BR/>
 * 
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInterfaceType("AllFieldCasesInterface")
@SuppressWarnings("unused")
public interface AllFieldCasesInterface  {

	
	
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = java.util.UUID.class)
	public void setId(java.util.UUID id);

	
	
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = java.util.UUID.class)
	public java.util.UUID getId();

	@GraphQLScalar(fieldName = "name", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public void setName(java.lang.String name);

	@GraphQLScalar(fieldName = "name", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String getName();

	@GraphQLScalar(fieldName = "forname", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public void setForname(java.lang.String forname);

	@GraphQLScalar(fieldName = "forname", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String getForname();

	@GraphQLScalar(fieldName = "age", graphQLTypeSimpleName = "Long", javaClass = java.lang.Long.class)
	public void setAge(java.lang.Long age);

	@GraphQLScalar(fieldName = "age", graphQLTypeSimpleName = "Long", javaClass = java.lang.Long.class)
	public java.lang.Long getAge();

	@GraphQLScalar(fieldName = "nbComments", graphQLTypeSimpleName = "Int", javaClass = java.lang.Integer.class)
	public void setNbComments(java.lang.Integer nbComments);

	@GraphQLScalar(fieldName = "nbComments", graphQLTypeSimpleName = "Int", javaClass = java.lang.Integer.class)
	public java.lang.Integer getNbComments();

	
	@GraphQLScalar(fieldName = "comments", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public void setComments(List<java.lang.String> comments);

	
	@GraphQLScalar(fieldName = "comments", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public List<java.lang.String> getComments();

	
	@GraphQLScalar(fieldName = "booleans", graphQLTypeSimpleName = "Boolean", javaClass = java.lang.Boolean.class)
	public void setBooleans(List<java.lang.Boolean> booleans);

	
	@GraphQLScalar(fieldName = "booleans", graphQLTypeSimpleName = "Boolean", javaClass = java.lang.Boolean.class)
	public List<java.lang.Boolean> getBooleans();

	
	@GraphQLScalar(fieldName = "aliases", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public void setAliases(List<java.lang.String> aliases);

	
	@GraphQLScalar(fieldName = "aliases", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public List<java.lang.String> getAliases();

	
	@GraphQLScalar(fieldName = "planets", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public void setPlanets(List<java.lang.String> planets);

	
	@GraphQLScalar(fieldName = "planets", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public List<java.lang.String> getPlanets();

	
	@GraphQLNonScalar(fieldName = "friends", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	public void setFriends(List<Human> friends);

	
	@GraphQLNonScalar(fieldName = "friends", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	public List<Human> getFriends();

	@GraphQLNonScalar(fieldName = "oneWithIdSubType", graphQLTypeSimpleName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	public void setOneWithIdSubType(AllFieldCasesWithIdSubtype oneWithIdSubType);

	@GraphQLNonScalar(fieldName = "oneWithIdSubType", graphQLTypeSimpleName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	public AllFieldCasesWithIdSubtype getOneWithIdSubType();

	
	@GraphQLNonScalar(fieldName = "listWithIdSubTypes", graphQLTypeSimpleName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	public void setListWithIdSubTypes(List<AllFieldCasesWithIdSubtype> listWithIdSubTypes);

	
	@GraphQLNonScalar(fieldName = "listWithIdSubTypes", graphQLTypeSimpleName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	public List<AllFieldCasesWithIdSubtype> getListWithIdSubTypes();

	@GraphQLNonScalar(fieldName = "oneWithoutIdSubType", graphQLTypeSimpleName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	public void setOneWithoutIdSubType(AllFieldCasesWithoutIdSubtype oneWithoutIdSubType);

	@GraphQLNonScalar(fieldName = "oneWithoutIdSubType", graphQLTypeSimpleName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	public AllFieldCasesWithoutIdSubtype getOneWithoutIdSubType();

	
	@GraphQLNonScalar(fieldName = "listWithoutIdSubTypes", graphQLTypeSimpleName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	public void setListWithoutIdSubTypes(List<AllFieldCasesWithoutIdSubtype> listWithoutIdSubTypes);

	
	@GraphQLNonScalar(fieldName = "listWithoutIdSubTypes", graphQLTypeSimpleName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	public List<AllFieldCasesWithoutIdSubtype> getListWithoutIdSubTypes();

	@GraphQLScalar(fieldName = "extendedField", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public void setExtendedField(java.lang.String extendedField);

	@GraphQLScalar(fieldName = "extendedField", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String getExtendedField();
}
