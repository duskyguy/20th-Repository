/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.server.allGraphQLCases;

import java.util.HashMap;
import java.util.Map;


import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;





/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */

@GraphQLObjectType("Droid")
@SuppressWarnings("unused")
public class Droid 
	implements Character, WithID, AnyCharacter{


	public Droid(){
		// No action
	}

	
	
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = java.util.UUID.class)
	java.util.UUID id;


	@GraphQLScalar(fieldName = "name", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String name;


	
	@GraphQLNonScalar(fieldName = "friends", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	List<Character> friends;


	
	@GraphQLScalar(fieldName = "appearsIn", graphQLTypeSimpleName = "Episode", javaClass = Episode.class)
	List<Episode> appearsIn;


	@GraphQLScalar(fieldName = "primaryFunction", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String primaryFunction;




	/**
	 */
	@Override
	public void setId(java.util.UUID id) {
		if (id == null || id instanceof java.util.UUID) {
			this.id = (java.util.UUID) id;
		} else {
			throw new IllegalArgumentException("The given id should be an instance of java.util.UUID, but is an instance of "
					+ id.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public java.util.UUID getId() {
		return id;
	}


	/**
	 */
	@Override
	public void setName(java.lang.String name) {
		if (name == null || name instanceof java.lang.String) {
			this.name = (java.lang.String) name;
		} else {
			throw new IllegalArgumentException("The given name should be an instance of java.lang.String, but is an instance of "
					+ name.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public java.lang.String getName() {
		return name;
	}


	/**
	 */
	@Override
	@SuppressWarnings("unchecked")
	public void setFriends(List<Character> friends) {
		if (friends == null || friends instanceof List) {
			this.friends = (List<Character>) (Object) friends;
		} else {
			throw new IllegalArgumentException("The given friends should be an instance of List<Character>, but is an instance of "
					+ friends.getClass().getName());
		}
	}
 

 	/**
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<Character> getFriends() {
		return (List<Character>) (Object) friends;
	}

	/**
	 */
	public List<Character> getFriendsCharacter() {
		return friends;
	}


	/**
	 */
	@Override
	@SuppressWarnings("unchecked")
	public void setAppearsIn(List<Episode> appearsIn) {
		if (appearsIn == null || appearsIn instanceof List) {
			this.appearsIn = (List<Episode>) (Object) appearsIn;
		} else {
			throw new IllegalArgumentException("The given appearsIn should be an instance of List<Episode>, but is an instance of "
					+ appearsIn.getClass().getName());
		}
	}
 

 	/**
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<Episode> getAppearsIn() {
		return (List<Episode>) (Object) appearsIn;
	}

	/**
	 */
	public List<Episode> getAppearsInEpisode() {
		return appearsIn;
	}

	public void setPrimaryFunction(java.lang.String primaryFunction) {
		this.primaryFunction = primaryFunction;
	}

	public java.lang.String getPrimaryFunction() {
		return primaryFunction;
	}
		

     public String toString() {
        return "Droid {"
				+ "id: " + id
				+ ", "
				+ "name: " + name
				+ ", "
				+ "friends: " + friends
				+ ", "
				+ "appearsIn: " + appearsIn
				+ ", "
				+ "primaryFunction: " + primaryFunction
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private java.util.UUID id;
		private java.lang.String name;
		private List<Character> friends;
		private List<Episode> appearsIn;
		private java.lang.String primaryFunction;

		public Builder withId(java.util.UUID id) {
			this.id = id;
			return this;
		}
		public Builder withName(java.lang.String name) {
			this.name = name;
			return this;
		}
		public Builder withFriends(List<Character> friends) {
			this.friends = friends;
			return this;
		}
		public Builder withAppearsIn(List<Episode> appearsIn) {
			this.appearsIn = appearsIn;
			return this;
		}
		public Builder withPrimaryFunction(java.lang.String primaryFunction) {
			this.primaryFunction = primaryFunction;
			return this;
		}

		public Droid build() {
			Droid _object = new Droid();
			_object.setId(id);
			_object.setName(name);
			_object.setFriends(friends);
			_object.setAppearsIn(appearsIn);
			_object.setPrimaryFunction(primaryFunction);
			return _object;
		}
	}
}
