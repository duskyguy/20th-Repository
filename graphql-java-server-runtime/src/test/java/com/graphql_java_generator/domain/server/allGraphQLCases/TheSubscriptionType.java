/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.server.allGraphQLCases;

import java.util.HashMap;
import java.util.Map;


import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;


/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("TheSubscriptionType")
@SuppressWarnings("unused")
public class TheSubscriptionType 
{


	public TheSubscriptionType(){
		// No action
	}

	/**
	 *  Will be notified for each Human added to this Episode 
	 */
	@GraphQLNonScalar(fieldName = "subscribeNewHumanForEpisode", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	Human subscribeNewHumanForEpisode;


	/**
	 *  Issue 54
	 */
	
	@GraphQLScalar(fieldName = "subscribeToAList", graphQLTypeSimpleName = "Int", javaClass = java.lang.Integer.class)
	List<java.lang.Integer> subscribeToAList;


	
	@GraphQLScalar(fieldName = "subscribeToAListOfScalars", graphQLTypeSimpleName = "Date", javaClass = java.util.Date.class)
	List<java.util.Date> subscribeToAListOfScalars;


	/**
	 *  issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly serialized/deserialized
	 */
	@GraphQLScalar(fieldName = "issue53", graphQLTypeSimpleName = "Date", javaClass = java.util.Date.class)
	java.util.Date issue53;


	/**
	 *  Some subscriptions to test all kind of input parameters (to check proper serialization and deserialization)
	 */
	@GraphQLNonScalar(fieldName = "allGraphQLCasesInput", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	AllFieldCases allGraphQLCasesInput;


	@GraphQLNonScalar(fieldName = "allGraphQLCasesParam", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	AllFieldCases allGraphQLCasesParam;


	/**
	 *  A dummy subscription, that allows to test errors (and other strange behavior), and their return to the subscription's client
	 */
	@GraphQLScalar(fieldName = "subscriptionTest", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String subscriptionTest;


	/**
	 *  Issue 122: Check Subscription behavior when notification response is null
	 */
	@GraphQLScalar(fieldName = "subscriptionWithNullResponse", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String subscriptionWithNullResponse;


	/**
	 *  test for issue #139 (use of java reserved keyword)
	 */
	@GraphQLScalar(fieldName = "enumWithReservedJavaKeywordAsValues", graphQLTypeSimpleName = "EnumWithReservedJavaKeywordAsValues", javaClass = EnumWithReservedJavaKeywordAsValues.class)
	EnumWithReservedJavaKeywordAsValues enumWithReservedJavaKeywordAsValues;


	
	@GraphQLScalar(fieldName = "listOfEnumWithReservedJavaKeywordAsValues", graphQLTypeSimpleName = "EnumWithReservedJavaKeywordAsValues", javaClass = EnumWithReservedJavaKeywordAsValues.class)
	List<EnumWithReservedJavaKeywordAsValues> listOfEnumWithReservedJavaKeywordAsValues;


	@GraphQLScalar(fieldName = "if", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _if;


	@GraphQLScalar(fieldName = "implements", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _implements;



	/**
	 *  Will be notified for each Human added to this Episode 
	 */
	public void setSubscribeNewHumanForEpisode(Human subscribeNewHumanForEpisode) {
		this.subscribeNewHumanForEpisode = subscribeNewHumanForEpisode;
	}

	/**
	 *  Will be notified for each Human added to this Episode 
	*/
	public Human getSubscribeNewHumanForEpisode() {
		return subscribeNewHumanForEpisode;
	}
		

	/**
	 *  Issue 54
	 */
	public void setSubscribeToAList(List<java.lang.Integer> subscribeToAList) {
		this.subscribeToAList = subscribeToAList;
	}

	/**
	 *  Issue 54
	*/
	public List<java.lang.Integer> getSubscribeToAList() {
		return subscribeToAList;
	}
		

	public void setSubscribeToAListOfScalars(List<java.util.Date> subscribeToAListOfScalars) {
		this.subscribeToAListOfScalars = subscribeToAListOfScalars;
	}

	public List<java.util.Date> getSubscribeToAListOfScalars() {
		return subscribeToAListOfScalars;
	}
		

	/**
	 *  issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly serialized/deserialized
	 */
	public void setIssue53(java.util.Date issue53) {
		this.issue53 = issue53;
	}

	/**
	 *  issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly serialized/deserialized
	*/
	public java.util.Date getIssue53() {
		return issue53;
	}
		

	/**
	 *  Some subscriptions to test all kind of input parameters (to check proper serialization and deserialization)
	 */
	public void setAllGraphQLCasesInput(AllFieldCases allGraphQLCasesInput) {
		this.allGraphQLCasesInput = allGraphQLCasesInput;
	}

	/**
	 *  Some subscriptions to test all kind of input parameters (to check proper serialization and deserialization)
	*/
	public AllFieldCases getAllGraphQLCasesInput() {
		return allGraphQLCasesInput;
	}
		

	public void setAllGraphQLCasesParam(AllFieldCases allGraphQLCasesParam) {
		this.allGraphQLCasesParam = allGraphQLCasesParam;
	}

	public AllFieldCases getAllGraphQLCasesParam() {
		return allGraphQLCasesParam;
	}
		

	/**
	 *  A dummy subscription, that allows to test errors (and other strange behavior), and their return to the subscription's client
	 */
	public void setSubscriptionTest(java.lang.String subscriptionTest) {
		this.subscriptionTest = subscriptionTest;
	}

	/**
	 *  A dummy subscription, that allows to test errors (and other strange behavior), and their return to the subscription's client
	*/
	public java.lang.String getSubscriptionTest() {
		return subscriptionTest;
	}
		

	/**
	 *  Issue 122: Check Subscription behavior when notification response is null
	 */
	public void setSubscriptionWithNullResponse(java.lang.String subscriptionWithNullResponse) {
		this.subscriptionWithNullResponse = subscriptionWithNullResponse;
	}

	/**
	 *  Issue 122: Check Subscription behavior when notification response is null
	*/
	public java.lang.String getSubscriptionWithNullResponse() {
		return subscriptionWithNullResponse;
	}
		

	/**
	 *  test for issue #139 (use of java reserved keyword)
	 */
	public void setEnumWithReservedJavaKeywordAsValues(EnumWithReservedJavaKeywordAsValues enumWithReservedJavaKeywordAsValues) {
		this.enumWithReservedJavaKeywordAsValues = enumWithReservedJavaKeywordAsValues;
	}

	/**
	 *  test for issue #139 (use of java reserved keyword)
	*/
	public EnumWithReservedJavaKeywordAsValues getEnumWithReservedJavaKeywordAsValues() {
		return enumWithReservedJavaKeywordAsValues;
	}
		

	public void setListOfEnumWithReservedJavaKeywordAsValues(List<EnumWithReservedJavaKeywordAsValues> listOfEnumWithReservedJavaKeywordAsValues) {
		this.listOfEnumWithReservedJavaKeywordAsValues = listOfEnumWithReservedJavaKeywordAsValues;
	}

	public List<EnumWithReservedJavaKeywordAsValues> getListOfEnumWithReservedJavaKeywordAsValues() {
		return listOfEnumWithReservedJavaKeywordAsValues;
	}
		

	public void setIf(java.lang.String _if) {
		this._if = _if;
	}

	public java.lang.String getIf() {
		return _if;
	}
		

	public void setImplements(java.lang.String _implements) {
		this._implements = _implements;
	}

	public java.lang.String getImplements() {
		return _implements;
	}
		

     public String toString() {
        return "TheSubscriptionType {"
				+ "subscribeNewHumanForEpisode: " + subscribeNewHumanForEpisode
				+ ", "
				+ "subscribeToAList: " + subscribeToAList
				+ ", "
				+ "subscribeToAListOfScalars: " + subscribeToAListOfScalars
				+ ", "
				+ "issue53: " + issue53
				+ ", "
				+ "allGraphQLCasesInput: " + allGraphQLCasesInput
				+ ", "
				+ "allGraphQLCasesParam: " + allGraphQLCasesParam
				+ ", "
				+ "subscriptionTest: " + subscriptionTest
				+ ", "
				+ "subscriptionWithNullResponse: " + subscriptionWithNullResponse
				+ ", "
				+ "enumWithReservedJavaKeywordAsValues: " + enumWithReservedJavaKeywordAsValues
				+ ", "
				+ "listOfEnumWithReservedJavaKeywordAsValues: " + listOfEnumWithReservedJavaKeywordAsValues
				+ ", "
				+ "_if: " + _if
				+ ", "
				+ "_implements: " + _implements
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private Human subscribeNewHumanForEpisode;
		private List<java.lang.Integer> subscribeToAList;
		private List<java.util.Date> subscribeToAListOfScalars;
		private java.util.Date issue53;
		private AllFieldCases allGraphQLCasesInput;
		private AllFieldCases allGraphQLCasesParam;
		private java.lang.String subscriptionTest;
		private java.lang.String subscriptionWithNullResponse;
		private EnumWithReservedJavaKeywordAsValues enumWithReservedJavaKeywordAsValues;
		private List<EnumWithReservedJavaKeywordAsValues> listOfEnumWithReservedJavaKeywordAsValues;
		private java.lang.String _if;
		private java.lang.String _implements;

		public Builder withSubscribeNewHumanForEpisode(Human subscribeNewHumanForEpisode) {
			this.subscribeNewHumanForEpisode = subscribeNewHumanForEpisode;
			return this;
		}
		public Builder withSubscribeToAList(List<java.lang.Integer> subscribeToAList) {
			this.subscribeToAList = subscribeToAList;
			return this;
		}
		public Builder withSubscribeToAListOfScalars(List<java.util.Date> subscribeToAListOfScalars) {
			this.subscribeToAListOfScalars = subscribeToAListOfScalars;
			return this;
		}
		public Builder withIssue53(java.util.Date issue53) {
			this.issue53 = issue53;
			return this;
		}
		public Builder withAllGraphQLCasesInput(AllFieldCases allGraphQLCasesInput) {
			this.allGraphQLCasesInput = allGraphQLCasesInput;
			return this;
		}
		public Builder withAllGraphQLCasesParam(AllFieldCases allGraphQLCasesParam) {
			this.allGraphQLCasesParam = allGraphQLCasesParam;
			return this;
		}
		public Builder withSubscriptionTest(java.lang.String subscriptionTest) {
			this.subscriptionTest = subscriptionTest;
			return this;
		}
		public Builder withSubscriptionWithNullResponse(java.lang.String subscriptionWithNullResponse) {
			this.subscriptionWithNullResponse = subscriptionWithNullResponse;
			return this;
		}
		public Builder withEnumWithReservedJavaKeywordAsValues(EnumWithReservedJavaKeywordAsValues enumWithReservedJavaKeywordAsValues) {
			this.enumWithReservedJavaKeywordAsValues = enumWithReservedJavaKeywordAsValues;
			return this;
		}
		public Builder withListOfEnumWithReservedJavaKeywordAsValues(List<EnumWithReservedJavaKeywordAsValues> listOfEnumWithReservedJavaKeywordAsValues) {
			this.listOfEnumWithReservedJavaKeywordAsValues = listOfEnumWithReservedJavaKeywordAsValues;
			return this;
		}
		public Builder withIf(java.lang.String _if) {
			this._if = _if;
			return this;
		}
		public Builder withImplements(java.lang.String _implements) {
			this._implements = _implements;
			return this;
		}

		public TheSubscriptionType build() {
			TheSubscriptionType _object = new TheSubscriptionType();
			_object.setSubscribeNewHumanForEpisode(subscribeNewHumanForEpisode);
			_object.setSubscribeToAList(subscribeToAList);
			_object.setSubscribeToAListOfScalars(subscribeToAListOfScalars);
			_object.setIssue53(issue53);
			_object.setAllGraphQLCasesInput(allGraphQLCasesInput);
			_object.setAllGraphQLCasesParam(allGraphQLCasesParam);
			_object.setSubscriptionTest(subscriptionTest);
			_object.setSubscriptionWithNullResponse(subscriptionWithNullResponse);
			_object.setEnumWithReservedJavaKeywordAsValues(enumWithReservedJavaKeywordAsValues);
			_object.setListOfEnumWithReservedJavaKeywordAsValues(listOfEnumWithReservedJavaKeywordAsValues);
			_object.setIf(_if);
			_object.setImplements(_implements);
			return _object;
		}
	}
}
