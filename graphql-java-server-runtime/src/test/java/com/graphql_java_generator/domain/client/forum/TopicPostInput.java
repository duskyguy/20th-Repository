/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.client.forum;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("TopicPostInput")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class TopicPostInput {

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public TopicPostInput() {
		// No action
	}

	@JsonProperty("authorId")
	@GraphQLScalar(fieldName = "authorId", graphQLTypeSimpleName = "ID", javaClass = java.lang.String.class)
	java.lang.String authorId;

	@JsonProperty("date")
	// @JsonSerialize(using = CustomJacksonSerializers.Date.class)
	@GraphQLScalar(fieldName = "date", graphQLTypeSimpleName = "Date", javaClass = java.util.Date.class)
	java.util.Date date;

	@JsonProperty("publiclyAvailable")
	@GraphQLScalar(fieldName = "publiclyAvailable", graphQLTypeSimpleName = "Boolean", javaClass = java.lang.Boolean.class)
	java.lang.Boolean publiclyAvailable;

	@JsonProperty("title")
	@GraphQLScalar(fieldName = "title", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String title;

	@JsonProperty("content")
	@GraphQLScalar(fieldName = "content", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String content;

	public void setAuthorId(java.lang.String authorId) {
		this.authorId = authorId;
	}

	public java.lang.String getAuthorId() {
		return authorId;
	}

	public void setDate(java.util.Date date) {
		this.date = date;
	}

	public java.util.Date getDate() {
		return date;
	}

	public void setPubliclyAvailable(java.lang.Boolean publiclyAvailable) {
		this.publiclyAvailable = publiclyAvailable;
	}

	public java.lang.Boolean getPubliclyAvailable() {
		return publiclyAvailable;
	}

	public void setTitle(java.lang.String title) {
		this.title = title;
	}

	public java.lang.String getTitle() {
		return title;
	}

	public void setContent(java.lang.String content) {
		this.content = content;
	}

	public java.lang.String getContent() {
		return content;
	}

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

	@Override
	public String toString() {
		return "TopicPostInput {" + "authorId: " + authorId + ", " + "date: " + date + ", " + "publiclyAvailable: "
				+ publiclyAvailable + ", " + "title: " + title + ", " + "content: " + content + "}";
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private java.lang.String authorId;
		private java.util.Date date;
		private java.lang.Boolean publiclyAvailable;
		private java.lang.String title;
		private java.lang.String content;

		public Builder withAuthorId(java.lang.String authorId) {
			this.authorId = authorId;
			return this;
		}

		public Builder withDate(java.util.Date date) {
			this.date = date;
			return this;
		}

		public Builder withPubliclyAvailable(java.lang.Boolean publiclyAvailable) {
			this.publiclyAvailable = publiclyAvailable;
			return this;
		}

		public Builder withTitle(java.lang.String title) {
			this.title = title;
			return this;
		}

		public Builder withContent(java.lang.String content) {
			this.content = content;
			return this;
		}

		public TopicPostInput build() {
			TopicPostInput _object = new TopicPostInput();
			_object.setAuthorId(authorId);
			_object.setDate(date);
			_object.setPubliclyAvailable(publiclyAvailable);
			_object.setTitle(title);
			_object.setContent(content);
			return _object;
		}
	}
}
