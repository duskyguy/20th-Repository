/** Generated by the default template from graphql-java-generator */
package ${packageUtilName};

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

import org.dataloader.BatchLoaderEnvironment;
import org.dataloader.DataLoader;
import org.reactivestreams.Publisher;

import graphql.schema.DataFetchingEnvironment;
#if($configuration.generateBatchLoaderEnvironment)
import org.dataloader.BatchLoaderEnvironment;
#end

#foreach($import in $imports)
import $import;
#end

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
public interface ${dataFetcherDelegate.pascalCaseName} {
	
#foreach ($dataFetcher in $dataFetcherDelegate.dataFetchers)
##
##
##
##
## If this dataFetcher is a completableFuture, we add a DataLoader parameter
#if (${dataFetcher.completableFuture})
	/**
	 * This method loads the data for ${dataFetcher.field.owningType.name}.${dataFetcher.field.name}. 
	 * <BR/>
	 * For optimization, this method returns a CompletableFuture. This allows to use 
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server.<BR/>
	 * The principle is this one: The data loader collects all the data to load, avoid to load several times the same data, 
	 * and allows parallel execution of the queries, if multiple queries are to be run.<BR/>
	 * You can implements this method like this:
	 * <PRE>
	 * @Override
	 * public CompletableFuture<List<Character>> friends(DataFetchingEnvironment environment, DataLoader<${dataFetcher.field.type.identifier.type.classSimpleName}, ${dataFetcher.field.javaType}> dataLoader, Human origin) {
	 *     List<${configuration.javaTypeForIDType}> friendIds = origin.getFriendIds();
	 *     DataLoader<${configuration.javaTypeForIDType}, CharacterImpl> dataLoader = environment.getDataLoader("Character");
	 *     return dataLoader.loadMany(friendIds);
	 * }
	 * </PRE>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param dataLoader
	 *            The {@link DataLoader} allows to load several data in one query. It allows to solve the (n+1) queries
	 *            issues, and greatly optimizes the response time.<BR/>
	 *            You'll find more informations here: <A HREF=
	 *            "https://github.com/graphql-java/java-dataloader">https://github.com/graphql-java/java-dataloader</A>
#if($dataFetcher.graphQLOriginType)
	 * @param origin 
	 *    The object from which the field is fetch. In other word: the aim of this data fetcher is to fetch the ${dataFetcher.name} attribute
	 *    of the <I>origin</I>, which is an instance of {$dataFetcher.graphQLOriginType}. It depends on your data modle, but it typically contains 
	 *    the id to use in the query.
#end
#foreach($argument in $dataFetcher.field.inputParameters)
	 * @param ${argument.camelCaseName} 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
#end
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CompletableFuture<${dataFetcher.field.javaType}> ${dataFetcher.javaName}(DataFetchingEnvironment dataFetchingEnvironment, DataLoader<${dataFetcher.field.type.identifier.type.classSimpleName}, ${dataFetcher.field.javaType}> dataLoader#if($dataFetcher.graphQLOriginType), ${dataFetcher.graphQLOriginType} origin#end#foreach($argument in $dataFetcher.field.inputParameters), ${argument.javaType} ${argument.javaName}#end);
#end ## #if (${dataFetcher.completableFuture})

	/**
	 * This method loads the data for ${dataFetcher.field.owningType.name}.${dataFetcher.field.name}. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	#if($dataFetcher.graphQLOriginType)
	 * @param origin 
	 *    The object from which the field is fetch. In other word: the aim of this data fetcher is to fetch the ${dataFetcher.name} attribute
	 *    of the <I>origin</I>, which is an instance of {$dataFetcher.graphQLOriginType}. It depends on your data modle, but it typically contains 
	 *    the id to use in the query.
	#end
	#foreach($argument in $dataFetcher.field.inputParameters)
	 * @param ${argument.camelCaseName} 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	#end
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
#if ($dataFetcherDelegate.type.requestType == "subscription")
## The returned type for subscription is embeded in a Publisher 
	public Publisher<#if($dataFetcher.field.fieldTypeAST.mandatory==false)Optional<#end${dataFetcher.field.javaType}#if($dataFetcher.field.fieldTypeAST.mandatory==false)>#end> ${dataFetcher.javaName}(DataFetchingEnvironment dataFetchingEnvironment#if($dataFetcher.graphQLOriginType), ${dataFetcher.graphQLOriginType} origin#end#foreach($argument in $dataFetcher.field.inputParameters), ${argument.javaType} ${argument.javaName}#end);
#else
	public ${dataFetcher.field.javaType} ${dataFetcher.javaName}(DataFetchingEnvironment dataFetchingEnvironment#if($dataFetcher.graphQLOriginType), ${dataFetcher.graphQLOriginType} origin#end#foreach($argument in $dataFetcher.field.inputParameters), ${argument.javaType} ${argument.javaName}#end);
#end 

##
##
##
##
##
##
##
##
##
##

#end
#foreach ($batchLoader in $dataFetcherDelegate.batchLoaders)
	/**
	 * This method loads a list of ${dataFetcher.field.name}, based on the list of id to be fetched. This method is used by
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server, when recursing down through the object associations.<BR/>
	 * You can find more information on this page:
	 * <A HREF="https://www.graphql-java.com/documentation/master/batching/">graphql-java batching</A>
	 * 
	 * @param keys
	 *            A list of ${batchLoader.type.identifier.type.name}'s id
	 * @return A list of ${batchLoader.type.identifier.type.name}s
	 */
	public List<${batchLoader.type.classSimpleName}> batchLoader(List<${batchLoader.type.identifier.type.classSimpleName}> keys#if($configuration.generateBatchLoaderEnvironment), BatchLoaderEnvironment environment#end);

#end
}
