<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.graphql-java-generator</groupId>
		<artifactId>graphql-maven-plugin-samples</artifactId>
		<version>1.18.11</version>
	</parent>

	<artifactId>graphql-maven-plugin-samples-allGraphQLCases-server</artifactId>

	<build>
		<plugins>
			<plugin>
				<groupId>com.graphql-java-generator</groupId>
				<artifactId>graphql-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>generateServerCode</goal>
						</goals>
						<configuration>
							<!-- addRelayConnections will generate all the Relay Connection stuff 
								(Node, Edge and Connection interfaces, and creating the XxxEdge and XxxConnection 
								interfaces or objects), for fields marked with the RelayConnection directive. 
								See the documentation for more information -->
							<addRelayConnections>true</addRelayConnections>
							<copyRuntimeSources>false</copyRuntimeSources>
							<generateBatchLoaderEnvironment>true</generateBatchLoaderEnvironment>
							<packageName>org.allGraphQLCases.server</packageName>
							<schemaFileFolder>../graphql-maven-plugin-samples-allGraphQLCases-client/src/graphqls/allGraphQLCases</schemaFileFolder>
							<separateUtilityClasses>true</separateUtilityClasses>
							<skipGenerationIfSchemaHasNotChanged>true</skipGenerationIfSchemaHasNotChanged>
							<customScalars>
								<customScalar>
									<graphQLTypeName>Base64String</graphQLTypeName>
									<javaType>byte[]</javaType>
									<graphQLScalarTypeStaticField>com.graphql_java_generator.customscalars.GraphQLScalarTypeBase64String.GraphQLBase64String</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>Date</graphQLTypeName>
									<javaType>java.util.Date</javaType>
									<graphQLScalarTypeStaticField>com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>DateTime</graphQLTypeName>
									<javaType>java.time.OffsetDateTime</javaType>
									<graphQLScalarTypeStaticField>graphql.scalars.ExtendedScalars.DateTime</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>else</graphQLTypeName>
									<javaType>java.lang.String</javaType>
									<graphQLScalarTypeGetter>org.allGraphQLCases.server.impl.GraphQLScalarTypeElse.getElseScalar()</graphQLScalarTypeGetter>
								</customScalar>
								<customScalar>
									<graphQLTypeName>Long</graphQLTypeName>
									<javaType>java.lang.Long</javaType>
									<graphQLScalarTypeStaticField>graphql.scalars.ExtendedScalars.GraphQLLong</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>NonNegativeInt</graphQLTypeName>
									<javaType>java.lang.Integer</javaType>
									<graphQLScalarTypeStaticField>graphql.scalars.ExtendedScalars.NonNegativeInt</graphQLScalarTypeStaticField>
								</customScalar>
							</customScalars>
                            <!-- ServerINputPrefix -->
                            <inputPrefix>SINP_</inputPrefix>
                            <!-- ServerINputSuffix -->
                            <inputSuffix>_SINS</inputSuffix>
                            <!-- ServerTypePrefix -->
                            <typePrefix>STP_</typePrefix>
                            <!-- ServerTypeSuffix etc. -->
                            <typeSuffix>_STS</typeSuffix>
                            <interfacePrefix>SIP_</interfacePrefix>
                            <interfaceSuffix>_SIS</interfaceSuffix>
                            <unionPrefix>SUP_</unionPrefix>
                            <unionSuffix>_SUS</unionSuffix>
                            <enumPrefix>SEP_</enumPrefix>
                            <enumSuffix>_SES</enumSuffix>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-test-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.build.directory}/generated-sources/graphql-maven-plugin</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<!-- We don't want to spam the repository with test/sample artefacts -->
				<artifactId>maven-deploy-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<!-- Dependencies for tests -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Dependencies for the generated code -->
		<dependency>
			<groupId>com.graphql-java-generator</groupId>
			<artifactId>graphql-java-server-runtime</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security.oauth.boot</groupId>
			<artifactId>spring-security-oauth2-autoconfigure</artifactId>
			<version>2.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>com.nimbusds</groupId>
			<artifactId>oauth2-oidc-sdk</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.graphql-java</groupId>
			<artifactId>graphql-java-extended-scalars</artifactId>
		</dependency>

		<!-- Generates at runtime a GUI to execute GraphQL requests. -->
		<!-- Very useful for tests, but take care for production ! -->
		<dependency>
			<groupId>com.graphql-java-kickstart</groupId>
			<artifactId>graphiql-spring-boot-starter</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>com.github.dozermapper</groupId>
			<artifactId>dozer-core</artifactId>
		</dependency>

	</dependencies>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<reportSets>
					<reportSet>
						<id>non-aggregate</id>
						<reports>
							<report>javadoc</report>
						</reports>
					</reportSet>
				</reportSets>
				<configuration>
					<source>8</source>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

</project>
