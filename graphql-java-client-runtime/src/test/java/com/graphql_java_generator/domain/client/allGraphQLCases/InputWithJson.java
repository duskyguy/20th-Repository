/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.client.allGraphQLCases;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.client.GraphQLObjectMapper;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("InputWithJson")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class InputWithJson {

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public InputWithJson() {
		// No action
	}

	@JsonProperty("test")
	@GraphQLScalar(fieldName = "test", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class, listDepth = 0)
	java.lang.String test;

	@JsonProperty("json")
	// @JsonSerialize(using = CustomJacksonSerializers.JSON.class)
	@GraphQLScalar(fieldName = "json", graphQLTypeSimpleName = "JSON", javaClass = com.fasterxml.jackson.databind.node.ObjectNode.class, listDepth = 0)
	com.fasterxml.jackson.databind.node.ObjectNode json;

	@JsonProperty("jsons")
	// @JsonSerialize(using = CustomJacksonSerializers.ListJSON.class)
	@GraphQLScalar(fieldName = "jsons", graphQLTypeSimpleName = "JSON", javaClass = com.fasterxml.jackson.databind.node.ObjectNode.class, listDepth = 1)
	List<com.fasterxml.jackson.databind.node.ObjectNode> jsons;

	@JsonProperty("test")
	public void setTest(java.lang.String test) {
		this.test = test;
	}

	@JsonProperty("test")
	public java.lang.String getTest() {
		return this.test;
	}

	@JsonProperty("json")
	public void setJson(com.fasterxml.jackson.databind.node.ObjectNode json) {
		this.json = json;
	}

	@JsonProperty("json")
	public com.fasterxml.jackson.databind.node.ObjectNode getJson() {
		return this.json;
	}

	@JsonProperty("jsons")
	public void setJsons(List<com.fasterxml.jackson.databind.node.ObjectNode> jsons) {
		this.jsons = jsons;
	}

	@JsonProperty("jsons")
	public List<com.fasterxml.jackson.databind.node.ObjectNode> getJsons() {
		return this.jsons;
	}

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		this.aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return this.aliasValues.get(alias);
	}

	@Override
	public String toString() {
		return "InputWithJson {" //$NON-NLS-1$
				+ "test: " + this.test //$NON-NLS-1$
				+ ", " //$NON-NLS-1$
				+ "json: " + this.json //$NON-NLS-1$
				+ ", " //$NON-NLS-1$
				+ "jsons: " + this.jsons //$NON-NLS-1$
				+ "}"; //$NON-NLS-1$
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private java.lang.String test;
		private com.fasterxml.jackson.databind.node.ObjectNode json;
		private List<com.fasterxml.jackson.databind.node.ObjectNode> jsons;

		public Builder withTest(java.lang.String testParam) {
			this.test = testParam;
			return this;
		}

		public Builder withJson(com.fasterxml.jackson.databind.node.ObjectNode jsonParam) {
			this.json = jsonParam;
			return this;
		}

		public Builder withJsons(List<com.fasterxml.jackson.databind.node.ObjectNode> jsonsParam) {
			this.jsons = jsonsParam;
			return this;
		}

		public InputWithJson build() {
			InputWithJson _object = new InputWithJson();
			_object.setTest(this.test);
			_object.setJson(this.json);
			_object.setJsons(this.jsons);
			return _object;
		}
	}
}
