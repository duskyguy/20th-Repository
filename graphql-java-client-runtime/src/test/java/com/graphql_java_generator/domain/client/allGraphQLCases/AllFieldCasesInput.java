/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.client.allGraphQLCases;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.client.GraphQLObjectMapper;
import com.graphql_java_generator.exception.GraphQLRequestExecutionException;

/**
 * #############################################################################################################
 * ############### ALL GRAPHQL CASES TEST CASES################################################################
 * #############################################################################################################
 *
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("AllFieldCasesInput")
public class AllFieldCasesInput {

	/**
	 * This map contains the deserialiazed values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public AllFieldCasesInput() {
		// No action
	}

	@JsonProperty("id")
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = String.class)
	String id;

	@JsonProperty("name")
	@GraphQLScalar(fieldName = "name", graphQLTypeSimpleName = "String", javaClass = String.class)
	String name;

	@JsonProperty("forname")
	@GraphQLScalar(fieldName = "forname", graphQLTypeSimpleName = "String", javaClass = String.class)
	String forname;

	@JsonProperty("break")
	@GraphQLScalar(fieldName = "break", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class, listDepth = 0)
	java.lang.String _break;

	@JsonProperty("age")
	@GraphQLScalar(fieldName = "age", graphQLTypeSimpleName = "Long", javaClass = Long.class)
	Long age;

	@JsonProperty("date")
	@GraphQLScalar(fieldName = "date", graphQLTypeSimpleName = "Date", javaClass = Date.class)
	Date date;

	@JsonProperty("dates")
	@GraphQLScalar(fieldName = "dates", graphQLTypeSimpleName = "Date", javaClass = Date.class, listDepth = 1)
	List<Date> dates;

	@JsonProperty("nbComments")
	@GraphQLScalar(fieldName = "nbComments", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	Integer nbComments;

	@JsonProperty("comments")
	@GraphQLScalar(fieldName = "comments", graphQLTypeSimpleName = "String", javaClass = String.class)
	List<String> comments;

	@JsonProperty("booleans")
	@GraphQLScalar(fieldName = "booleans", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	List<Boolean> booleans;

	@JsonProperty("aliases")
	@GraphQLScalar(fieldName = "aliases", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 1)
	List<String> aliases;

	@JsonProperty("planets")
	@GraphQLScalar(fieldName = "planets", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 1)
	List<String> planets;

	@JsonProperty("matrix")
	@GraphQLScalar(fieldName = "matrix", graphQLTypeSimpleName = "Float", javaClass = Double.class, listDepth = 2)
	List<List<Double>> matrix;

	@JsonProperty("withIdSubtype")
	@GraphQLNonScalar(fieldName = "withIdSubtype", graphQLTypeSimpleName = "AllFieldCasesWithIdSubtypeInput", javaClass = AllFieldCasesWithIdSubtypeInput.class)
	List<AllFieldCasesWithIdSubtypeInput> withIdSubtype;

	@JsonProperty("withoutIdSubtype")
	@GraphQLNonScalar(fieldName = "withoutIdSubtype", graphQLTypeSimpleName = "AllFieldCasesWithoutIdSubtypeInput", javaClass = AllFieldCasesWithoutIdSubtypeInput.class)
	List<AllFieldCasesWithoutIdSubtypeInput> withoutIdSubtype;

	public void setId(String id) {
		this.id = id;
	}

	public String getId() {
		return id;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setForname(String forname) {
		this.forname = forname;
	}

	public String getForname() {
		return forname;
	}

	@JsonProperty("break")
	public void setBreak(java.lang.String _break) {
		this._break = _break;
	}

	@JsonProperty("break")
	public java.lang.String getBreak() {
		return _break;
	}

	public void setAge(Long age) {
		this.age = age;
	}

	public Long getAge() {
		return age;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	public Date getDate() {
		return date;
	}

	public void setDates(List<Date> dates) {
		this.dates = dates;
	}

	public List<Date> getDates() {
		return dates;
	}

	public void setNbComments(Integer nbComments) {
		this.nbComments = nbComments;
	}

	public Integer getNbComments() {
		return nbComments;
	}

	public void setComments(List<String> comments) {
		this.comments = comments;
	}

	public List<String> getComments() {
		return comments;
	}

	public void setBooleans(List<Boolean> booleans) {
		this.booleans = booleans;
	}

	public List<Boolean> getBooleans() {
		return booleans;
	}

	public void setAliases(List<String> aliases) {
		this.aliases = aliases;
	}

	public List<String> getAliases() {
		return aliases;
	}

	public void setPlanets(List<String> planets) {
		this.planets = planets;
	}

	public List<String> getPlanets() {
		return planets;
	}

	public void setMatrix(List<List<Double>> matrix) {
		this.matrix = matrix;
	}

	public List<List<Double>> getMatrix() {
		return matrix;
	}

	public void setWithIdSubtype(List<AllFieldCasesWithIdSubtypeInput> withIdSubtype) {
		this.withIdSubtype = withIdSubtype;
	}

	public List<AllFieldCasesWithIdSubtypeInput> getWithIdSubtype() {
		return withIdSubtype;
	}

	public void setWithoutIdSubtype(List<AllFieldCasesWithoutIdSubtypeInput> withoutIdSubtype) {
		this.withoutIdSubtype = withoutIdSubtype;
	}

	public List<AllFieldCasesWithoutIdSubtypeInput> getWithoutIdSubtype() {
		return withoutIdSubtype;
	}

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 * @throws GraphQLRequestExecutionException
	 *             If the value can not be parsed
	 */
	public Object getAliasValue(String alias) throws GraphQLRequestExecutionException {
		Object value = aliasValues.get(alias);
		if (value instanceof GraphQLRequestExecutionException)
			throw (GraphQLRequestExecutionException) value;
		else
			return value;
	}

	@Override
	public String toString() {
		return "AllFieldCasesInput {" + "id: " + id + ", " + "name: " + name + ", " + "forname: " + forname + ", "
				+ "age: " + age + ", " + "date: " + date + ", " + "dates: " + dates + ", " + "nbComments: " + nbComments
				+ ", " + "comments: " + comments + ", " + "booleans: " + booleans + ", " + "aliases: " + aliases + ", "
				+ "planets: " + planets + ", " + "matrix: " + matrix + ", " + "withIdSubtype: " + withIdSubtype + ", "
				+ "withoutIdSubtype: " + withoutIdSubtype + "}";
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Builder
	 */
	public static class Builder {
		private String id;
		private String name;
		private String forname;
		private java.lang.String _break;
		private Long age;
		private Date date;
		private List<Date> dates;
		private Integer nbComments;
		private List<String> comments;
		private List<Boolean> booleans;
		private List<String> aliases;
		private List<String> planets;
		private List<List<Double>> matrix;
		private List<AllFieldCasesWithIdSubtypeInput> withIdSubtype;
		private List<AllFieldCasesWithoutIdSubtypeInput> withoutIdSubtype;

		public Builder withId(String id) {
			this.id = id;
			return this;
		}

		public Builder withName(String name) {
			this.name = name;
			return this;
		}

		public Builder withForname(String forname) {
			this.forname = forname;
			return this;
		}

		public Builder withBreak(java.lang.String _break) {
			this._break = _break;
			return this;
		}

		public Builder withAge(Long age) {
			this.age = age;
			return this;
		}

		public Builder withDate(Date date) {
			this.date = date;
			return this;
		}

		public Builder withDates(List<Date> dates) {
			this.dates = dates;
			return this;
		}

		public Builder withNbComments(Integer nbComments) {
			this.nbComments = nbComments;
			return this;
		}

		public Builder withComments(List<String> comments) {
			this.comments = comments;
			return this;
		}

		public Builder withBooleans(List<Boolean> booleans) {
			this.booleans = booleans;
			return this;
		}

		public Builder withAliases(List<String> aliases) {
			this.aliases = aliases;
			return this;
		}

		public Builder withPlanets(List<String> planets) {
			this.planets = planets;
			return this;
		}

		public Builder withMatrix(List<List<Double>> matrix) {
			this.matrix = matrix;
			return this;
		}

		public Builder withWithIdSubtype(List<AllFieldCasesWithIdSubtypeInput> withIdSubtype) {
			this.withIdSubtype = withIdSubtype;
			return this;
		}

		public Builder withWithoutIdSubtype(List<AllFieldCasesWithoutIdSubtypeInput> withoutIdSubtype) {
			this.withoutIdSubtype = withoutIdSubtype;
			return this;
		}

		public AllFieldCasesInput build() {
			AllFieldCasesInput _object = new AllFieldCasesInput();
			_object.setId(id);
			_object.setName(name);
			_object.setForname(forname);
			_object.setBreak(_break);
			_object.setAge(age);
			_object.setDate(date);
			_object.setDates(dates);
			_object.setNbComments(nbComments);
			_object.setComments(comments);
			_object.setBooleans(booleans);
			_object.setAliases(aliases);
			_object.setPlanets(planets);
			_object.setMatrix(matrix);
			_object.setWithIdSubtype(withIdSubtype);
			_object.setWithoutIdSubtype(withoutIdSubtype);
			return _object;
		}
	}
}
