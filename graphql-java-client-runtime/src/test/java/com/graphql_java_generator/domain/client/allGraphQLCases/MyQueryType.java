/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.client.allGraphQLCases;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLQuery;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.exception.GraphQLRequestExecutionException;
import com.graphql_java_generator.exception.GraphQLRequestPreparationException;
import com.graphql_java_generator.client.GraphQLObjectMapper;
import com.graphql_java_generator.client.request.InputParameter;
import com.graphql_java_generator.client.request.ObjectResponse;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.RequestType;
import java.util.List;

import com.graphql_java_generator.client.GraphqlClientUtils;

/**
 * This class contains the response for a full request. See the
 * <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/exec_graphql_requests.html">plugin web
 * site</A> for more information on full and partial requests.<BR/>
 * It also allows access to the _extensions_ part of the response. Take a look at the
 * <A HRE="https://spec.graphql.org/June2018/#sec-Response">GraphQL spec</A> for more information on this.
 * 
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLQuery(name = "MyQueryType", type = RequestType.query)
@GraphQLObjectType("MyQueryType")
@SuppressWarnings("unused")
public class MyQueryType extends MyQueryTypeExecutorMySchema
		implements com.graphql_java_generator.client.GraphQLRequestObject {

	private GraphQLObjectMapper extensionMapper = null;
	private JsonNode extensions;
	private Map<String, JsonNode> extensionsAsMap = null;

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public MyQueryType() {
		// No action
	}

	@JsonProperty("withoutParameters")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListCharacter.class)
	@GraphQLNonScalar(fieldName = "withoutParameters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	List<Character> withoutParameters;

	@JsonProperty("withOneOptionalParam")
	@GraphQLInputParameters(names = { "character" }, types = { "CharacterInput" }, mandatories = {
			false }, listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "withOneOptionalParam", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	Character withOneOptionalParam;

	@JsonProperty("withOneMandatoryParam")
	@GraphQLInputParameters(names = { "character" }, types = { "CharacterInput" }, mandatories = {
			true }, listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "withOneMandatoryParam", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	Character withOneMandatoryParam;

	@JsonProperty("withOneMandatoryParamDefaultValue")
	@GraphQLInputParameters(names = { "intParam" }, types = { "Int" }, mandatories = { true }, listDepths = {
			0 }, itemsMandatory = { false })
	@GraphQLScalar(fieldName = "withOneMandatoryParamDefaultValue", graphQLTypeSimpleName = "Int", javaClass = java.lang.Integer.class)
	java.lang.Integer withOneMandatoryParamDefaultValue;

	@JsonProperty("withTwoMandatoryParamDefaultVal")
	@GraphQLInputParameters(names = { "theHero", "num" }, types = { "DroidInput", "Int" }, mandatories = { true,
			false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "withTwoMandatoryParamDefaultVal", graphQLTypeSimpleName = "Droid", javaClass = Droid.class)
	Droid withTwoMandatoryParamDefaultVal;

	@JsonProperty("withEnum")
	@GraphQLInputParameters(names = { "episode" }, types = { "Episode" }, mandatories = { true }, listDepths = {
			0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "withEnum", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	Character withEnum;

	@JsonProperty("withListOfList")
	@GraphQLInputParameters(names = { "matrix" }, types = { "Float" }, mandatories = { true }, listDepths = {
			2 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "withListOfList", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	AllFieldCases withListOfList;

	/**
	 * Test for issue #174: a custom scalar which Java type is an array
	 */
	@JsonProperty("testBase64String")
	@JsonDeserialize(using = CustomJacksonDeserializers.Base64String.class)
	@GraphQLInputParameters(names = { "input" }, types = { "Base64String" }, mandatories = { true }, listDepths = {
			0 }, itemsMandatory = { false })
	@GraphQLScalar(fieldName = "testBase64String", graphQLTypeSimpleName = "Base64String", javaClass = byte[].class)
	byte[] testBase64String;

	/**
	 * ############################################################################### withList return a list of
	 * Characters, matching the given list of CharacterInput. The name of the first Character returned is replaced by
	 * the given firstName. All ids are generated
	 */
	@JsonProperty("withList")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListCharacter.class)
	@GraphQLInputParameters(names = { "firstName", "characters" }, types = { "String",
			"CharacterInput" }, mandatories = { true, true }, listDepths = { 0, 1 }, itemsMandatory = { false, true })
	@GraphQLNonScalar(fieldName = "withList", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	List<Character> withList;

	/**
	 * ############################################################################### Complementary tests with the
	 * AllFieldCases Object
	 */
	@JsonProperty("allFieldCases")
	@GraphQLInputParameters(names = { "input" }, types = { "AllFieldCasesInput" }, mandatories = {
			false }, listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "allFieldCases", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	AllFieldCases allFieldCases;

	/**
	 * ############################################################################### Test for unions
	 */
	@JsonProperty("unionTest")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListAnyCharacter.class)
	@GraphQLInputParameters(names = { "human1", "human2", "droid1", "droid2" }, types = { "HumanInput", "HumanInput",
			"DroidInput", "DroidInput" }, mandatories = { false, false, false,
					false }, listDepths = { 0, 0, 0, 0 }, itemsMandatory = { false, false, false, false })
	@GraphQLNonScalar(fieldName = "unionTest", graphQLTypeSimpleName = "AnyCharacter", javaClass = AnyCharacter.class)
	List<AnyCharacter> unionTest;

	/**
	 * ############################################################################### error always returns an error!
	 * (used to check the error management)
	 */
	@JsonProperty("error")
	@GraphQLInputParameters(names = { "errorLabel" }, types = { "String" }, mandatories = { true }, listDepths = {
			0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "error", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	Character error;

	/**
	 * Check for GraphQL identifier that are java keywords
	 */
	@JsonProperty("aBreak")
	@GraphQLNonScalar(fieldName = "aBreak", graphQLTypeSimpleName = "break", javaClass = _break.class)
	_break aBreak;

	/**
	 * ############################################################################### queries to check directive
	 * behavior Returns the value, and potentially the anotherValue of the @testDirective directive set on the
	 * directiveOnQuery query. List is null if the directive is not present.
	 */
	@JsonProperty("directiveOnQuery")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListString.class)
	@GraphQLInputParameters(names = { "uppercase" }, types = { "Boolean" }, mandatories = { false }, listDepths = {
			0 }, itemsMandatory = { false })
	@GraphQLScalar(fieldName = "directiveOnQuery", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	List<java.lang.String> directiveOnQuery;

	/**
	 * Returns the value, and potentially the anotherValue of the @testDirective directive set on the @directiveOnQuery.
	 * List is null if the directive is not present.
	 */
	@JsonProperty("directiveOnField")
	@GraphQLNonScalar(fieldName = "directiveOnField", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	Character directiveOnField;

	/**
	 * ############################################################################### queries to check the
	 * addRelayConnections capability
	 */
	@JsonProperty("connectionWithoutParameters")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListCharacter.class)
	@GraphQLNonScalar(fieldName = "connectionWithoutParameters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	List<Character> connectionWithoutParameters;

	@JsonProperty("connectionOnHuman")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListHuman.class)
	@GraphQLInputParameters(names = { "planet", "episode" }, types = { "String", "Episode" }, mandatories = { false,
			false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "connectionOnHuman", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	List<Human> connectionOnHuman;

	/**
	 * ############################################################################### queries created to test some
	 * issues issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly
	 * serialized/deserialized
	 */
	@JsonProperty("issue53")
	@JsonDeserialize(using = CustomJacksonDeserializers.Date.class)
	@GraphQLInputParameters(names = { "date" }, types = { "Date" }, mandatories = { true }, listDepths = {
			0 }, itemsMandatory = { false })
	@GraphQLScalar(fieldName = "issue53", graphQLTypeSimpleName = "Date", javaClass = java.util.Date.class)
	java.util.Date issue53;

	/**
	 * issue82 is about hard coded values as parameters. Other types are tests with other queries, but there was no
	 * method with a simple float parameter
	 */
	@JsonProperty("issue82Float")
	@GraphQLInputParameters(names = { "aFloat" }, types = { "Float" }, mandatories = { true }, listDepths = {
			0 }, itemsMandatory = { false })
	@GraphQLScalar(fieldName = "issue82Float", graphQLTypeSimpleName = "Float", javaClass = java.lang.Double.class)
	java.lang.Double issue82Float;

	@JsonProperty("issue82ID")
	@GraphQLInputParameters(names = { "aID" }, types = { "ID" }, mandatories = { true }, listDepths = {
			0 }, itemsMandatory = { false })
	@GraphQLScalar(fieldName = "issue82ID", graphQLTypeSimpleName = "ID", javaClass = java.lang.String.class)
	java.lang.String issue82ID;

	/**
	 * test for issue #128 (compilation error when a Query returns a type 'Client')
	 */
	@JsonProperty("issue128")
	@GraphQLNonScalar(fieldName = "issue128", graphQLTypeSimpleName = "Client", javaClass = Client.class)
	Client issue128;

	/**
	 * test for issue #139 (use of java reserved keyword)
	 */
	@JsonProperty("enumWithReservedJavaKeywordAsValues")
	@GraphQLScalar(fieldName = "enumWithReservedJavaKeywordAsValues", graphQLTypeSimpleName = "EnumWithReservedJavaKeywordAsValues", javaClass = EnumWithReservedJavaKeywordAsValues.class)
	EnumWithReservedJavaKeywordAsValues enumWithReservedJavaKeywordAsValues;

	@JsonProperty("listOfEnumWithReservedJavaKeywordAsValues")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListEnumWithReservedJavaKeywordAsValues.class)
	@GraphQLInputParameters(names = { "param1", "param2" }, types = { "EnumWithReservedJavaKeywordAsValues",
			"EnumWithReservedJavaKeywordAsValues" }, mandatories = { false,
					false }, listDepths = { 0, 1 }, itemsMandatory = { false, false })
	@GraphQLScalar(fieldName = "listOfEnumWithReservedJavaKeywordAsValues", graphQLTypeSimpleName = "EnumWithReservedJavaKeywordAsValues", javaClass = EnumWithReservedJavaKeywordAsValues.class)
	List<EnumWithReservedJavaKeywordAsValues> listOfEnumWithReservedJavaKeywordAsValues;

	@JsonProperty("if")
	@GraphQLScalar(fieldName = "if", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _if;

	@JsonProperty("implements")
	@GraphQLScalar(fieldName = "implements", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _implements;

	@JsonProperty("import")
	@GraphQLScalar(fieldName = "import", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _import;

	@JsonProperty("instanceof")
	@GraphQLScalar(fieldName = "instanceof", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _instanceof;

	@JsonProperty("int")
	@GraphQLScalar(fieldName = "int", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _int;

	@JsonProperty("interface")
	@GraphQLScalar(fieldName = "interface", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _interface;

	@JsonProperty("long")
	@GraphQLScalar(fieldName = "long", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _long;

	@JsonProperty("native")
	@GraphQLScalar(fieldName = "native", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _native;

	@JsonProperty("new")
	@GraphQLScalar(fieldName = "new", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _new;

	@JsonProperty("package")
	@GraphQLScalar(fieldName = "package", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _package;

	@JsonProperty("private")
	@GraphQLScalar(fieldName = "private", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _private;

	@JsonProperty("protected")
	@GraphQLScalar(fieldName = "protected", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _protected;

	@JsonProperty("public")
	@GraphQLScalar(fieldName = "public", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _public;

	@JsonProperty("return")
	@GraphQLScalar(fieldName = "return", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _return;

	@JsonProperty("short")
	@GraphQLScalar(fieldName = "short", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _short;

	@JsonProperty("static")
	@GraphQLScalar(fieldName = "static", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _static;

	@JsonProperty("strictfp")
	@GraphQLScalar(fieldName = "strictfp", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _strictfp;

	@JsonProperty("super")
	@GraphQLScalar(fieldName = "super", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _super;

	@JsonProperty("switch")
	@GraphQLScalar(fieldName = "switch", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _switch;

	@JsonProperty("synchronized")
	@GraphQLScalar(fieldName = "synchronized", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _synchronized;

	@JsonProperty("this")
	@GraphQLScalar(fieldName = "this", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _this;

	@JsonProperty("throw")
	@GraphQLScalar(fieldName = "throw", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _throw;

	@JsonProperty("throws")
	@GraphQLScalar(fieldName = "throws", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _throws;

	@JsonProperty("transient")
	@GraphQLScalar(fieldName = "transient", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _transient;

	@JsonProperty("try")
	@GraphQLScalar(fieldName = "try", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _try;

	@JsonProperty("void")
	@GraphQLScalar(fieldName = "void", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _void;

	@JsonProperty("volatile")
	@GraphQLScalar(fieldName = "volatile", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _volatile;

	@JsonProperty("while")
	@GraphQLScalar(fieldName = "while", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String _while;

	/**
	 * test for issue #140 (error for type that implements multiple interfaces)
	 */
	@JsonProperty("foo140")
	@GraphQLNonScalar(fieldName = "foo140", graphQLTypeSimpleName = "Foo140", javaClass = Foo140.class)
	Foo140 foo140;

	/**
	 * ############################################################################### A particular test, based on the
	 * github schema: a query that returns the query object. It introduces complexity in the code generation, that must
	 * be tested
	 */
	@JsonProperty("relay")
	@GraphQLNonScalar(fieldName = "relay", graphQLTypeSimpleName = "MyQueryType", javaClass = MyQueryType.class)
	MyQueryType relay;

	@JsonProperty("__schema")
	@GraphQLNonScalar(fieldName = "__schema", graphQLTypeSimpleName = "__Schema", javaClass = __Schema.class)
	__Schema __schema;

	@JsonProperty("__type")
	@GraphQLInputParameters(names = { "name" }, types = { "String" }, mandatories = { true }, listDepths = {
			0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "__type", graphQLTypeSimpleName = "__Type", javaClass = __Type.class)
	__Type __type;

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String __typename;

	public void setWithoutParameters(List<Character> withoutParameters) {
		this.withoutParameters = withoutParameters;
	}

	public List<Character> getWithoutParameters() {
		return withoutParameters;
	}

	public void setWithOneOptionalParam(Character withOneOptionalParam) {
		this.withOneOptionalParam = withOneOptionalParam;
	}

	public Character getWithOneOptionalParam() {
		return withOneOptionalParam;
	}

	public void setWithOneMandatoryParam(Character withOneMandatoryParam) {
		this.withOneMandatoryParam = withOneMandatoryParam;
	}

	public Character getWithOneMandatoryParam() {
		return withOneMandatoryParam;
	}

	public void setWithOneMandatoryParamDefaultValue(java.lang.Integer withOneMandatoryParamDefaultValue) {
		this.withOneMandatoryParamDefaultValue = withOneMandatoryParamDefaultValue;
	}

	public java.lang.Integer getWithOneMandatoryParamDefaultValue() {
		return withOneMandatoryParamDefaultValue;
	}

	public void setWithTwoMandatoryParamDefaultVal(Droid withTwoMandatoryParamDefaultVal) {
		this.withTwoMandatoryParamDefaultVal = withTwoMandatoryParamDefaultVal;
	}

	public Droid getWithTwoMandatoryParamDefaultVal() {
		return withTwoMandatoryParamDefaultVal;
	}

	public void setWithEnum(Character withEnum) {
		this.withEnum = withEnum;
	}

	public Character getWithEnum() {
		return withEnum;
	}

	public void setWithListOfList(AllFieldCases withListOfList) {
		this.withListOfList = withListOfList;
	}

	public AllFieldCases getWithListOfList() {
		return withListOfList;
	}

	/**
	 * ############################################################################### withList return a list of
	 * Characters, matching the given list of CharacterInput. The name of the first Character returned is replaced by
	 * the given firstName. All ids are generated
	 */
	public void setWithList(List<Character> withList) {
		this.withList = withList;
	}

	/**
	 * ############################################################################### withList return a list of
	 * Characters, matching the given list of CharacterInput. The name of the first Character returned is replaced by
	 * the given firstName. All ids are generated
	 */
	public List<Character> getWithList() {
		return withList;
	}

	/**
	 * ############################################################################### Complementary tests with the
	 * AllFieldCases Object
	 */
	public void setAllFieldCases(AllFieldCases allFieldCases) {
		this.allFieldCases = allFieldCases;
	}

	/**
	 * ############################################################################### Complementary tests with the
	 * AllFieldCases Object
	 */
	public AllFieldCases getAllFieldCases() {
		return allFieldCases;
	}

	/**
	 * ############################################################################### Test for unions
	 */
	public void setUnionTest(List<AnyCharacter> unionTest) {
		this.unionTest = unionTest;
	}

	/**
	 * ############################################################################### Test for unions
	 */
	public List<AnyCharacter> getUnionTest() {
		return unionTest;
	}

	/**
	 * ############################################################################### error always returns an error!
	 * (used to check the error management)
	 */
	public void setError(Character error) {
		this.error = error;
	}

	/**
	 * ############################################################################### error always returns an error!
	 * (used to check the error management)
	 */
	public Character getError() {
		return error;
	}

	/**
	 * Check for GraphQL identifier that are java keywords
	 */
	public void setABreak(_break aBreak) {
		this.aBreak = aBreak;
	}

	/**
	 * Check for GraphQL identifier that are java keywords
	 */
	public _break getABreak() {
		return aBreak;
	}

	/**
	 * ############################################################################### queries to check directive
	 * behavior Returns the value, and potentially the anotherValue of the @testDirective directive set on the
	 * directiveOnQuery query. List is null if the directive is not present.
	 */
	public void setDirectiveOnQuery(List<java.lang.String> directiveOnQuery) {
		this.directiveOnQuery = directiveOnQuery;
	}

	/**
	 * ############################################################################### queries to check directive
	 * behavior Returns the value, and potentially the anotherValue of the @testDirective directive set on the
	 * directiveOnQuery query. List is null if the directive is not present.
	 */
	public List<java.lang.String> getDirectiveOnQuery() {
		return directiveOnQuery;
	}

	/**
	 * Returns the value, and potentially the anotherValue of the @testDirective directive set on the @directiveOnQuery.
	 * List is null if the directive is not present.
	 */
	public void setDirectiveOnField(Character directiveOnField) {
		this.directiveOnField = directiveOnField;
	}

	/**
	 * Returns the value, and potentially the anotherValue of the @testDirective directive set on the @directiveOnQuery.
	 * List is null if the directive is not present.
	 */
	public Character getDirectiveOnField() {
		return directiveOnField;
	}

	/**
	 * ############################################################################### queries to check the
	 * addRelayConnections capability
	 */
	public void setConnectionWithoutParameters(List<Character> connectionWithoutParameters) {
		this.connectionWithoutParameters = connectionWithoutParameters;
	}

	/**
	 * ############################################################################### queries to check the
	 * addRelayConnections capability
	 */
	public List<Character> getConnectionWithoutParameters() {
		return connectionWithoutParameters;
	}

	public void setConnectionOnHuman(List<Human> connectionOnHuman) {
		this.connectionOnHuman = connectionOnHuman;
	}

	public List<Human> getConnectionOnHuman() {
		return connectionOnHuman;
	}

	/**
	 * ############################################################################### queries created to test some
	 * issues issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly
	 * serialized/deserialized
	 */
	public void setIssue53(java.util.Date issue53) {
		this.issue53 = issue53;
	}

	/**
	 * ############################################################################### queries created to test some
	 * issues issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly
	 * serialized/deserialized
	 */
	public java.util.Date getIssue53() {
		return issue53;
	}

	/**
	 * issue82 is about hard coded values as parameters. Other types are tests with other queries, but there was no
	 * method with a simple float parameter
	 */
	public void setIssue82Float(java.lang.Double issue82Float) {
		this.issue82Float = issue82Float;
	}

	/**
	 * issue82 is about hard coded values as parameters. Other types are tests with other queries, but there was no
	 * method with a simple float parameter
	 */
	public java.lang.Double getIssue82Float() {
		return issue82Float;
	}

	public void setIssue82ID(java.lang.String issue82ID) {
		this.issue82ID = issue82ID;
	}

	public java.lang.String getIssue82ID() {
		return issue82ID;
	}

	/**
	 * test for issue #128 (compilation error when a Query returns a type 'Client')
	 */
	public void setIssue128(Client issue128) {
		this.issue128 = issue128;
	}

	/**
	 * test for issue #128 (compilation error when a Query returns a type 'Client')
	 */
	public Client getIssue128() {
		return issue128;
	}

	/**
	 * test for issue #139 (use of java reserved keyword)
	 */
	public void setEnumWithReservedJavaKeywordAsValues(
			EnumWithReservedJavaKeywordAsValues enumWithReservedJavaKeywordAsValues) {
		this.enumWithReservedJavaKeywordAsValues = enumWithReservedJavaKeywordAsValues;
	}

	/**
	 * test for issue #139 (use of java reserved keyword)
	 */
	public EnumWithReservedJavaKeywordAsValues getEnumWithReservedJavaKeywordAsValues() {
		return enumWithReservedJavaKeywordAsValues;
	}

	public void setListOfEnumWithReservedJavaKeywordAsValues(
			List<EnumWithReservedJavaKeywordAsValues> listOfEnumWithReservedJavaKeywordAsValues) {
		this.listOfEnumWithReservedJavaKeywordAsValues = listOfEnumWithReservedJavaKeywordAsValues;
	}

	public List<EnumWithReservedJavaKeywordAsValues> getListOfEnumWithReservedJavaKeywordAsValues() {
		return listOfEnumWithReservedJavaKeywordAsValues;
	}

	public void setIf(java.lang.String _if) {
		this._if = _if;
	}

	public java.lang.String getIf() {
		return _if;
	}

	public void setImplements(java.lang.String _implements) {
		this._implements = _implements;
	}

	public java.lang.String getImplements() {
		return _implements;
	}

	public void setImport(java.lang.String _import) {
		this._import = _import;
	}

	public java.lang.String getImport() {
		return _import;
	}

	public void setInstanceof(java.lang.String _instanceof) {
		this._instanceof = _instanceof;
	}

	public java.lang.String getInstanceof() {
		return _instanceof;
	}

	public void setInt(java.lang.String _int) {
		this._int = _int;
	}

	public java.lang.String getInt() {
		return _int;
	}

	public void setInterface(java.lang.String _interface) {
		this._interface = _interface;
	}

	public java.lang.String getInterface() {
		return _interface;
	}

	public void setLong(java.lang.String _long) {
		this._long = _long;
	}

	public java.lang.String getLong() {
		return _long;
	}

	public void setNative(java.lang.String _native) {
		this._native = _native;
	}

	public java.lang.String getNative() {
		return _native;
	}

	public void setNew(java.lang.String _new) {
		this._new = _new;
	}

	public java.lang.String getNew() {
		return _new;
	}

	public void setPackage(java.lang.String _package) {
		this._package = _package;
	}

	public java.lang.String getPackage() {
		return _package;
	}

	public void setPrivate(java.lang.String _private) {
		this._private = _private;
	}

	public java.lang.String getPrivate() {
		return _private;
	}

	public void setProtected(java.lang.String _protected) {
		this._protected = _protected;
	}

	public java.lang.String getProtected() {
		return _protected;
	}

	public void setPublic(java.lang.String _public) {
		this._public = _public;
	}

	public java.lang.String getPublic() {
		return _public;
	}

	public void setReturn(java.lang.String _return) {
		this._return = _return;
	}

	public java.lang.String getReturn() {
		return _return;
	}

	public void setShort(java.lang.String _short) {
		this._short = _short;
	}

	public java.lang.String getShort() {
		return _short;
	}

	public void setStatic(java.lang.String _static) {
		this._static = _static;
	}

	public java.lang.String getStatic() {
		return _static;
	}

	public void setStrictfp(java.lang.String _strictfp) {
		this._strictfp = _strictfp;
	}

	public java.lang.String getStrictfp() {
		return _strictfp;
	}

	public void setSuper(java.lang.String _super) {
		this._super = _super;
	}

	public java.lang.String getSuper() {
		return _super;
	}

	public void setSwitch(java.lang.String _switch) {
		this._switch = _switch;
	}

	public java.lang.String getSwitch() {
		return _switch;
	}

	public void setSynchronized(java.lang.String _synchronized) {
		this._synchronized = _synchronized;
	}

	public java.lang.String getSynchronized() {
		return _synchronized;
	}

	public void setThis(java.lang.String _this) {
		this._this = _this;
	}

	public java.lang.String getThis() {
		return _this;
	}

	public void setThrow(java.lang.String _throw) {
		this._throw = _throw;
	}

	public java.lang.String getThrow() {
		return _throw;
	}

	public void setThrows(java.lang.String _throws) {
		this._throws = _throws;
	}

	public java.lang.String getThrows() {
		return _throws;
	}

	public void setTransient(java.lang.String _transient) {
		this._transient = _transient;
	}

	public java.lang.String getTransient() {
		return _transient;
	}

	public void setTry(java.lang.String _try) {
		this._try = _try;
	}

	public java.lang.String getTry() {
		return _try;
	}

	public void setVoid(java.lang.String _void) {
		this._void = _void;
	}

	public java.lang.String getVoid() {
		return _void;
	}

	public void setVolatile(java.lang.String _volatile) {
		this._volatile = _volatile;
	}

	public java.lang.String getVolatile() {
		return _volatile;
	}

	public void setWhile(java.lang.String _while) {
		this._while = _while;
	}

	public java.lang.String getWhile() {
		return _while;
	}

	/**
	 * test for issue #140 (error for type that implements multiple interfaces)
	 */
	public void setFoo140(Foo140 foo140) {
		this.foo140 = foo140;
	}

	/**
	 * test for issue #140 (error for type that implements multiple interfaces)
	 */
	public Foo140 getFoo140() {
		return foo140;
	}

	/**
	 * ############################################################################### A particular test, based on the
	 * github schema: a query that returns the query object. It introduces complexity in the code generation, that must
	 * be tested
	 */
	public void setRelay(MyQueryType relay) {
		this.relay = relay;
	}

	/**
	 * ############################################################################### A particular test, based on the
	 * github schema: a query that returns the query object. It introduces complexity in the code generation, that must
	 * be tested
	 */
	public MyQueryType getRelay() {
		return relay;
	}

	/**
	 * Test for issue #174: a custom scalar which Java type is an array
	 */
	public void setTestBase64String(byte[] testBase64String) {
		this.testBase64String = testBase64String;
	}

	/**
	 * Test for issue #174: a custom scalar which Java type is an array
	 */
	public byte[] getTestBase64String() {
		return testBase64String;
	}

	public void set__schema(__Schema __schema) {
		this.__schema = __schema;
	}

	public __Schema get__schema() {
		return __schema;
	}

	public void set__type(__Type __type) {
		this.__type = __type;
	}

	public __Type get__type() {
		return __type;
	}

	public void set__typename(java.lang.String __typename) {
		this.__typename = __typename;
	}

	public java.lang.String get__typename() {
		return __typename;
	}

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 * @throws GraphQLRequestExecutionException
	 *             If the value can not be parsed
	 */
	public Object getAliasValue(String alias) throws GraphQLRequestExecutionException {
		Object value = aliasValues.get(alias);
		if (value instanceof GraphQLRequestExecutionException)
			throw (GraphQLRequestExecutionException) value;
		else
			return value;
	}

	public String toString() {
		return "MyQueryType {" + "withoutParameters: " + withoutParameters + ", " + "withOneOptionalParam: "
				+ withOneOptionalParam + ", " + "withOneMandatoryParam: " + withOneMandatoryParam + ", "
				+ "withOneMandatoryParamDefaultValue: " + withOneMandatoryParamDefaultValue + ", "
				+ "withTwoMandatoryParamDefaultVal: " + withTwoMandatoryParamDefaultVal + ", " + "withEnum: " + withEnum
				+ ", " + "withListOfList: " + withListOfList + ", " + "withList: " + withList + ", " + "allFieldCases: "
				+ allFieldCases + ", " + "unionTest: " + unionTest + ", " + "error: " + error + ", " + "aBreak: "
				+ aBreak + ", " + "directiveOnQuery: " + directiveOnQuery + ", " + "directiveOnField: "
				+ directiveOnField + ", " + "connectionWithoutParameters: " + connectionWithoutParameters + ", "
				+ "connectionOnHuman: " + connectionOnHuman + ", " + "issue53: " + issue53 + ", " + "issue82Float: "
				+ issue82Float + ", " + "issue82ID: " + issue82ID + ", " + "issue128: " + issue128 + ", "
				+ "enumWithReservedJavaKeywordAsValues: " + enumWithReservedJavaKeywordAsValues + ", "
				+ "listOfEnumWithReservedJavaKeywordAsValues: " + listOfEnumWithReservedJavaKeywordAsValues + ", "
				+ "_if: " + _if + ", " + "_implements: " + _implements + ", " + "_import: " + _import + ", "
				+ "_instanceof: " + _instanceof + ", " + "_int: " + _int + ", " + "_interface: " + _interface + ", "
				+ "_long: " + _long + ", " + "_native: " + _native + ", " + "_new: " + _new + ", " + "_package: "
				+ _package + ", " + "_private: " + _private + ", " + "_protected: " + _protected + ", " + "_public: "
				+ _public + ", " + "_return: " + _return + ", " + "_short: " + _short + ", " + "_static: " + _static
				+ ", " + "_strictfp: " + _strictfp + ", " + "_super: " + _super + ", " + "_switch: " + _switch + ", "
				+ "_synchronized: " + _synchronized + ", " + "_this: " + _this + ", " + "_throw: " + _throw + ", "
				+ "_throws: " + _throws + ", " + "_transient: " + _transient + ", " + "_try: " + _try + ", " + "_void: "
				+ _void + ", " + "_volatile: " + _volatile + ", " + "_while: " + _while + ", " + "foo140: " + foo140
				+ ", " + "relay: " + relay + ", " + "__schema: " + __schema + ", " + "__type: " + __type + ", "
				+ "__typename: " + __typename + "}";
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private List<Character> withoutParameters;
		private Character withOneOptionalParam;
		private Character withOneMandatoryParam;
		private java.lang.Integer withOneMandatoryParamDefaultValue;
		private Droid withTwoMandatoryParamDefaultVal;
		private Character withEnum;
		private AllFieldCases withListOfList;
		private List<Character> withList;
		private AllFieldCases allFieldCases;
		private List<AnyCharacter> unionTest;
		private Character error;
		private _break aBreak;
		private List<java.lang.String> directiveOnQuery;
		private Character directiveOnField;
		private List<Character> connectionWithoutParameters;
		private List<Human> connectionOnHuman;
		private java.util.Date issue53;
		private java.lang.Double issue82Float;
		private java.lang.String issue82ID;
		private Client issue128;
		private EnumWithReservedJavaKeywordAsValues enumWithReservedJavaKeywordAsValues;
		private List<EnumWithReservedJavaKeywordAsValues> listOfEnumWithReservedJavaKeywordAsValues;
		private java.lang.String _if;
		private java.lang.String _implements;
		private java.lang.String _import;
		private java.lang.String _instanceof;
		private java.lang.String _int;
		private java.lang.String _interface;
		private java.lang.String _long;
		private java.lang.String _native;
		private java.lang.String _new;
		private java.lang.String _package;
		private java.lang.String _private;
		private java.lang.String _protected;
		private java.lang.String _public;
		private java.lang.String _return;
		private java.lang.String _short;
		private java.lang.String _static;
		private java.lang.String _strictfp;
		private java.lang.String _super;
		private java.lang.String _switch;
		private java.lang.String _synchronized;
		private java.lang.String _this;
		private java.lang.String _throw;
		private java.lang.String _throws;
		private java.lang.String _transient;
		private java.lang.String _try;
		private java.lang.String _void;
		private java.lang.String _volatile;
		private java.lang.String _while;
		private Foo140 foo140;
		private MyQueryType relay;
		private __Schema __schema;
		private __Type __type;

		public Builder withWithoutParameters(List<Character> withoutParameters) {
			this.withoutParameters = withoutParameters;
			return this;
		}

		public Builder withWithOneOptionalParam(Character withOneOptionalParam) {
			this.withOneOptionalParam = withOneOptionalParam;
			return this;
		}

		public Builder withWithOneMandatoryParam(Character withOneMandatoryParam) {
			this.withOneMandatoryParam = withOneMandatoryParam;
			return this;
		}

		public Builder withWithOneMandatoryParamDefaultValue(java.lang.Integer withOneMandatoryParamDefaultValue) {
			this.withOneMandatoryParamDefaultValue = withOneMandatoryParamDefaultValue;
			return this;
		}

		public Builder withWithTwoMandatoryParamDefaultVal(Droid withTwoMandatoryParamDefaultVal) {
			this.withTwoMandatoryParamDefaultVal = withTwoMandatoryParamDefaultVal;
			return this;
		}

		public Builder withWithEnum(Character withEnum) {
			this.withEnum = withEnum;
			return this;
		}

		public Builder withWithListOfList(AllFieldCases withListOfList) {
			this.withListOfList = withListOfList;
			return this;
		}

		public Builder withWithList(List<Character> withList) {
			this.withList = withList;
			return this;
		}

		public Builder withAllFieldCases(AllFieldCases allFieldCases) {
			this.allFieldCases = allFieldCases;
			return this;
		}

		public Builder withUnionTest(List<AnyCharacter> unionTest) {
			this.unionTest = unionTest;
			return this;
		}

		public Builder withError(Character error) {
			this.error = error;
			return this;
		}

		public Builder withABreak(_break aBreak) {
			this.aBreak = aBreak;
			return this;
		}

		public Builder withDirectiveOnQuery(List<java.lang.String> directiveOnQuery) {
			this.directiveOnQuery = directiveOnQuery;
			return this;
		}

		public Builder withDirectiveOnField(Character directiveOnField) {
			this.directiveOnField = directiveOnField;
			return this;
		}

		public Builder withConnectionWithoutParameters(List<Character> connectionWithoutParameters) {
			this.connectionWithoutParameters = connectionWithoutParameters;
			return this;
		}

		public Builder withConnectionOnHuman(List<Human> connectionOnHuman) {
			this.connectionOnHuman = connectionOnHuman;
			return this;
		}

		public Builder withIssue53(java.util.Date issue53) {
			this.issue53 = issue53;
			return this;
		}

		public Builder withIssue82Float(java.lang.Double issue82Float) {
			this.issue82Float = issue82Float;
			return this;
		}

		public Builder withIssue82ID(java.lang.String issue82ID) {
			this.issue82ID = issue82ID;
			return this;
		}

		public Builder withIssue128(Client issue128) {
			this.issue128 = issue128;
			return this;
		}

		public Builder withEnumWithReservedJavaKeywordAsValues(
				EnumWithReservedJavaKeywordAsValues enumWithReservedJavaKeywordAsValues) {
			this.enumWithReservedJavaKeywordAsValues = enumWithReservedJavaKeywordAsValues;
			return this;
		}

		public Builder withListOfEnumWithReservedJavaKeywordAsValues(
				List<EnumWithReservedJavaKeywordAsValues> listOfEnumWithReservedJavaKeywordAsValues) {
			this.listOfEnumWithReservedJavaKeywordAsValues = listOfEnumWithReservedJavaKeywordAsValues;
			return this;
		}

		public Builder withIf(java.lang.String _if) {
			this._if = _if;
			return this;
		}

		public Builder withImplements(java.lang.String _implements) {
			this._implements = _implements;
			return this;
		}

		public Builder withImport(java.lang.String _import) {
			this._import = _import;
			return this;
		}

		public Builder withInstanceof(java.lang.String _instanceof) {
			this._instanceof = _instanceof;
			return this;
		}

		public Builder withInt(java.lang.String _int) {
			this._int = _int;
			return this;
		}

		public Builder withInterface(java.lang.String _interface) {
			this._interface = _interface;
			return this;
		}

		public Builder withLong(java.lang.String _long) {
			this._long = _long;
			return this;
		}

		public Builder withNative(java.lang.String _native) {
			this._native = _native;
			return this;
		}

		public Builder withNew(java.lang.String _new) {
			this._new = _new;
			return this;
		}

		public Builder withPackage(java.lang.String _package) {
			this._package = _package;
			return this;
		}

		public Builder withPrivate(java.lang.String _private) {
			this._private = _private;
			return this;
		}

		public Builder withProtected(java.lang.String _protected) {
			this._protected = _protected;
			return this;
		}

		public Builder withPublic(java.lang.String _public) {
			this._public = _public;
			return this;
		}

		public Builder withReturn(java.lang.String _return) {
			this._return = _return;
			return this;
		}

		public Builder withShort(java.lang.String _short) {
			this._short = _short;
			return this;
		}

		public Builder withStatic(java.lang.String _static) {
			this._static = _static;
			return this;
		}

		public Builder withStrictfp(java.lang.String _strictfp) {
			this._strictfp = _strictfp;
			return this;
		}

		public Builder withSuper(java.lang.String _super) {
			this._super = _super;
			return this;
		}

		public Builder withSwitch(java.lang.String _switch) {
			this._switch = _switch;
			return this;
		}

		public Builder withSynchronized(java.lang.String _synchronized) {
			this._synchronized = _synchronized;
			return this;
		}

		public Builder withThis(java.lang.String _this) {
			this._this = _this;
			return this;
		}

		public Builder withThrow(java.lang.String _throw) {
			this._throw = _throw;
			return this;
		}

		public Builder withThrows(java.lang.String _throws) {
			this._throws = _throws;
			return this;
		}

		public Builder withTransient(java.lang.String _transient) {
			this._transient = _transient;
			return this;
		}

		public Builder withTry(java.lang.String _try) {
			this._try = _try;
			return this;
		}

		public Builder withVoid(java.lang.String _void) {
			this._void = _void;
			return this;
		}

		public Builder withVolatile(java.lang.String _volatile) {
			this._volatile = _volatile;
			return this;
		}

		public Builder withWhile(java.lang.String _while) {
			this._while = _while;
			return this;
		}

		public Builder withFoo140(Foo140 foo140) {
			this.foo140 = foo140;
			return this;
		}

		public Builder withRelay(MyQueryType relay) {
			this.relay = relay;
			return this;
		}

		public Builder with__schema(__Schema __schema) {
			this.__schema = __schema;
			return this;
		}

		public Builder with__type(__Type __type) {
			this.__type = __type;
			return this;
		}

		public MyQueryType build() {
			MyQueryType _object = new MyQueryType();
			_object.setWithoutParameters(withoutParameters);
			_object.setWithOneOptionalParam(withOneOptionalParam);
			_object.setWithOneMandatoryParam(withOneMandatoryParam);
			_object.setWithOneMandatoryParamDefaultValue(withOneMandatoryParamDefaultValue);
			_object.setWithTwoMandatoryParamDefaultVal(withTwoMandatoryParamDefaultVal);
			_object.setWithEnum(withEnum);
			_object.setWithListOfList(withListOfList);
			_object.setWithList(withList);
			_object.setAllFieldCases(allFieldCases);
			_object.setUnionTest(unionTest);
			_object.setError(error);
			_object.setABreak(aBreak);
			_object.setDirectiveOnQuery(directiveOnQuery);
			_object.setDirectiveOnField(directiveOnField);
			_object.setConnectionWithoutParameters(connectionWithoutParameters);
			_object.setConnectionOnHuman(connectionOnHuman);
			_object.setIssue53(issue53);
			_object.setIssue82Float(issue82Float);
			_object.setIssue82ID(issue82ID);
			_object.setIssue128(issue128);
			_object.setEnumWithReservedJavaKeywordAsValues(enumWithReservedJavaKeywordAsValues);
			_object.setListOfEnumWithReservedJavaKeywordAsValues(listOfEnumWithReservedJavaKeywordAsValues);
			_object.setIf(_if);
			_object.setImplements(_implements);
			_object.setImport(_import);
			_object.setInstanceof(_instanceof);
			_object.setInt(_int);
			_object.setInterface(_interface);
			_object.setLong(_long);
			_object.setNative(_native);
			_object.setNew(_new);
			_object.setPackage(_package);
			_object.setPrivate(_private);
			_object.setProtected(_protected);
			_object.setPublic(_public);
			_object.setReturn(_return);
			_object.setShort(_short);
			_object.setStatic(_static);
			_object.setStrictfp(_strictfp);
			_object.setSuper(_super);
			_object.setSwitch(_switch);
			_object.setSynchronized(_synchronized);
			_object.setThis(_this);
			_object.setThrow(_throw);
			_object.setThrows(_throws);
			_object.setTransient(_transient);
			_object.setTry(_try);
			_object.setVoid(_void);
			_object.setVolatile(_volatile);
			_object.setWhile(_while);
			_object.setFoo140(foo140);
			_object.setRelay(relay);
			_object.set__schema(__schema);
			_object.set__type(__type);
			_object.set__typename("MyQueryType");
			return _object;
		}
	}

	private GraphQLObjectMapper getExtensionMapper() {
		if (extensionMapper == null) {
			extensionMapper = new GraphQLObjectMapper("com.graphql_java_generator.domain.client.allGraphQLCases", null);
		}
		return extensionMapper;
	}

	public JsonNode getExtensions() {
		return extensions;
	}

	public void setExtensions(JsonNode extensions) {
		this.extensions = extensions;
	}

	/**
	 * Returns the extensions as a map. The values can't be deserialized, as their type is unknown.
	 * 
	 * @return
	 */
	public Map<String, JsonNode> getExtensionsAsMap() {
		if (extensionsAsMap == null) {
			extensionsAsMap = getExtensionMapper().convertValue(extensions, new TypeReference<Map<String, JsonNode>>() {
			});
		}
		return extensionsAsMap;
	}

	/**
	 * Parse the value for the given _key_, as found in the <I>extensions</I> field of the GraphQL server's response,
	 * into the given _t_ class.
	 * 
	 * @param <T>
	 * @param key
	 * @param t
	 * @return null if the key is not in the <I>extensions</I> map. Otherwise: the value for this _key_, as a _t_
	 *         instance
	 * @throws JsonProcessingException
	 *             When there is an error when converting the key's value into the _t_ class
	 */
	public <T> T getExtensionsField(String key, Class<T> t) throws JsonProcessingException {
		JsonNode node = getExtensionsAsMap().get(key);
		return (node == null) ? null : getExtensionMapper().treeToValue(node, t);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public MyQueryTypeResponse execWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.exec(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public MyQueryTypeResponse exec(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.exec(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public MyQueryTypeResponse execWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super.execWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public MyQueryTypeResponse exec(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.exec(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getGraphQLRequest(String fullRequest) throws GraphQLRequestPreparationException {
		return super.getGraphQLRequest(fullRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withoutParameters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> withoutParametersWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withoutParametersWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withoutParameters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> withoutParameters(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withoutParameters(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withoutParameters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> withoutParametersWithBindValues(ObjectResponse objectResponse,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.withoutParametersWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withoutParameters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> withoutParameters(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.withoutParameters(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getWithoutParametersResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getWithoutParametersResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getWithoutParametersGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getWithoutParametersGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withOneOptionalParam", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character withOneOptionalParamWithBindValues(String queryResponseDef, CharacterInput character,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withOneOptionalParamWithBindValues(queryResponseDef, character, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withOneOptionalParam", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character withOneOptionalParam(String queryResponseDef, CharacterInput character, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withOneOptionalParam(queryResponseDef, character, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withOneOptionalParam", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character withOneOptionalParamWithBindValues(ObjectResponse objectResponse, CharacterInput character,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.withOneOptionalParamWithBindValues(objectResponse, character, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withOneOptionalParam", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character withOneOptionalParam(ObjectResponse objectResponse, CharacterInput character,
			Object... paramsAndValues) throws GraphQLRequestExecutionException {
		return super.withOneOptionalParam(objectResponse, character, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getWithOneOptionalParamResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getWithOneOptionalParamResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getWithOneOptionalParamGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getWithOneOptionalParamGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withOneMandatoryParam", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character withOneMandatoryParamWithBindValues(String queryResponseDef, CharacterInput character,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withOneMandatoryParamWithBindValues(queryResponseDef, character, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withOneMandatoryParam", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character withOneMandatoryParam(String queryResponseDef, CharacterInput character, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withOneMandatoryParam(queryResponseDef, character, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withOneMandatoryParam", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character withOneMandatoryParamWithBindValues(ObjectResponse objectResponse, CharacterInput character,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.withOneMandatoryParamWithBindValues(objectResponse, character, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withOneMandatoryParam", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character withOneMandatoryParam(ObjectResponse objectResponse, CharacterInput character,
			Object... paramsAndValues) throws GraphQLRequestExecutionException {
		return super.withOneMandatoryParam(objectResponse, character, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getWithOneMandatoryParamResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getWithOneMandatoryParamResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getWithOneMandatoryParamGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getWithOneMandatoryParamGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "withOneMandatoryParamDefaultValue", graphQLTypeSimpleName = "Int", javaClass = java.lang.Integer.class)
	public java.lang.Integer withOneMandatoryParamDefaultValueWithBindValues(String queryResponseDef,
			java.lang.Integer intParam, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withOneMandatoryParamDefaultValueWithBindValues(queryResponseDef, intParam, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "withOneMandatoryParamDefaultValue", graphQLTypeSimpleName = "Int", javaClass = java.lang.Integer.class)
	public java.lang.Integer withOneMandatoryParamDefaultValue(String queryResponseDef, java.lang.Integer intParam,
			Object... paramsAndValues) throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withOneMandatoryParamDefaultValue(queryResponseDef, intParam, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "withOneMandatoryParamDefaultValue", graphQLTypeSimpleName = "Int", javaClass = java.lang.Integer.class)
	public java.lang.Integer withOneMandatoryParamDefaultValueWithBindValues(ObjectResponse objectResponse,
			java.lang.Integer intParam, Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.withOneMandatoryParamDefaultValueWithBindValues(objectResponse, intParam, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "withOneMandatoryParamDefaultValue", graphQLTypeSimpleName = "Int", javaClass = java.lang.Integer.class)
	public java.lang.Integer withOneMandatoryParamDefaultValue(ObjectResponse objectResponse,
			java.lang.Integer intParam, Object... paramsAndValues) throws GraphQLRequestExecutionException {
		return super.withOneMandatoryParamDefaultValue(objectResponse, intParam, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getWithOneMandatoryParamDefaultValueResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getWithOneMandatoryParamDefaultValueResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getWithOneMandatoryParamDefaultValueGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getWithOneMandatoryParamDefaultValueGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withTwoMandatoryParamDefaultVal", graphQLTypeSimpleName = "Droid", javaClass = Droid.class)
	public Droid withTwoMandatoryParamDefaultValWithBindValues(String queryResponseDef, DroidInput theHero,
			java.lang.Integer num, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withTwoMandatoryParamDefaultValWithBindValues(queryResponseDef, theHero, num, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withTwoMandatoryParamDefaultVal", graphQLTypeSimpleName = "Droid", javaClass = Droid.class)
	public Droid withTwoMandatoryParamDefaultVal(String queryResponseDef, DroidInput theHero, java.lang.Integer num,
			Object... paramsAndValues) throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withTwoMandatoryParamDefaultVal(queryResponseDef, theHero, num, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withTwoMandatoryParamDefaultVal", graphQLTypeSimpleName = "Droid", javaClass = Droid.class)
	public Droid withTwoMandatoryParamDefaultValWithBindValues(ObjectResponse objectResponse, DroidInput theHero,
			java.lang.Integer num, Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.withTwoMandatoryParamDefaultValWithBindValues(objectResponse, theHero, num, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withTwoMandatoryParamDefaultVal", graphQLTypeSimpleName = "Droid", javaClass = Droid.class)
	public Droid withTwoMandatoryParamDefaultVal(ObjectResponse objectResponse, DroidInput theHero,
			java.lang.Integer num, Object... paramsAndValues) throws GraphQLRequestExecutionException {
		return super.withTwoMandatoryParamDefaultVal(objectResponse, theHero, num, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getWithTwoMandatoryParamDefaultValResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getWithTwoMandatoryParamDefaultValResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getWithTwoMandatoryParamDefaultValGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getWithTwoMandatoryParamDefaultValGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withEnum", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character withEnumWithBindValues(String queryResponseDef, Episode episode, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withEnumWithBindValues(queryResponseDef, episode, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withEnum", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character withEnum(String queryResponseDef, Episode episode, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withEnum(queryResponseDef, episode, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withEnum", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character withEnumWithBindValues(ObjectResponse objectResponse, Episode episode,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.withEnumWithBindValues(objectResponse, episode, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withEnum", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character withEnum(ObjectResponse objectResponse, Episode episode, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.withEnum(objectResponse, episode, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getWithEnumResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getWithEnumResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getWithEnumGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getWithEnumGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withListOfList", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	public AllFieldCases withListOfListWithBindValues(String queryResponseDef, List<List<java.lang.Double>> matrix,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withListOfListWithBindValues(queryResponseDef, matrix, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withListOfList", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	public AllFieldCases withListOfList(String queryResponseDef, List<List<java.lang.Double>> matrix,
			Object... paramsAndValues) throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withListOfList(queryResponseDef, matrix, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withListOfList", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	public AllFieldCases withListOfListWithBindValues(ObjectResponse objectResponse,
			List<List<java.lang.Double>> matrix, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super.withListOfListWithBindValues(objectResponse, matrix, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withListOfList", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	public AllFieldCases withListOfList(ObjectResponse objectResponse, List<List<java.lang.Double>> matrix,
			Object... paramsAndValues) throws GraphQLRequestExecutionException {
		return super.withListOfList(objectResponse, matrix, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getWithListOfListResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getWithListOfListResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getWithListOfListGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getWithListOfListGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withList", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> withListWithBindValues(String queryResponseDef, java.lang.String firstName,
			List<CharacterInput> characters, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withListWithBindValues(queryResponseDef, firstName, characters, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withList", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> withList(String queryResponseDef, java.lang.String firstName,
			List<CharacterInput> characters, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.withList(queryResponseDef, firstName, characters, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withList", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> withListWithBindValues(ObjectResponse objectResponse, java.lang.String firstName,
			List<CharacterInput> characters, Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.withListWithBindValues(objectResponse, firstName, characters, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "withList", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> withList(ObjectResponse objectResponse, java.lang.String firstName,
			List<CharacterInput> characters, Object... paramsAndValues) throws GraphQLRequestExecutionException {
		return super.withList(objectResponse, firstName, characters, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getWithListResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getWithListResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getWithListGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getWithListGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "allFieldCases", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	public AllFieldCases allFieldCasesWithBindValues(String queryResponseDef, AllFieldCasesInput input,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.allFieldCasesWithBindValues(queryResponseDef, input, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "allFieldCases", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	public AllFieldCases allFieldCases(String queryResponseDef, AllFieldCasesInput input, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.allFieldCases(queryResponseDef, input, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "allFieldCases", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	public AllFieldCases allFieldCasesWithBindValues(ObjectResponse objectResponse, AllFieldCasesInput input,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.allFieldCasesWithBindValues(objectResponse, input, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "allFieldCases", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	public AllFieldCases allFieldCases(ObjectResponse objectResponse, AllFieldCasesInput input,
			Object... paramsAndValues) throws GraphQLRequestExecutionException {
		return super.allFieldCases(objectResponse, input, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getAllFieldCasesResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getAllFieldCasesResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getAllFieldCasesGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getAllFieldCasesGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "unionTest", graphQLTypeSimpleName = "AnyCharacter", javaClass = AnyCharacter.class)
	public List<AnyCharacter> unionTestWithBindValues(String queryResponseDef, HumanInput human1, HumanInput human2,
			DroidInput droid1, DroidInput droid2, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.unionTestWithBindValues(queryResponseDef, human1, human2, droid1, droid2, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "unionTest", graphQLTypeSimpleName = "AnyCharacter", javaClass = AnyCharacter.class)
	public List<AnyCharacter> unionTest(String queryResponseDef, HumanInput human1, HumanInput human2,
			DroidInput droid1, DroidInput droid2, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.unionTest(queryResponseDef, human1, human2, droid1, droid2, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "unionTest", graphQLTypeSimpleName = "AnyCharacter", javaClass = AnyCharacter.class)
	public List<AnyCharacter> unionTestWithBindValues(ObjectResponse objectResponse, HumanInput human1,
			HumanInput human2, DroidInput droid1, DroidInput droid2, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super.unionTestWithBindValues(objectResponse, human1, human2, droid1, droid2, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "unionTest", graphQLTypeSimpleName = "AnyCharacter", javaClass = AnyCharacter.class)
	public List<AnyCharacter> unionTest(ObjectResponse objectResponse, HumanInput human1, HumanInput human2,
			DroidInput droid1, DroidInput droid2, Object... paramsAndValues) throws GraphQLRequestExecutionException {
		return super.unionTest(objectResponse, human1, human2, droid1, droid2, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getUnionTestResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getUnionTestResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getUnionTestGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getUnionTestGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "error", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character errorWithBindValues(String queryResponseDef, java.lang.String errorLabel,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.errorWithBindValues(queryResponseDef, errorLabel, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "error", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character error(String queryResponseDef, java.lang.String errorLabel, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.error(queryResponseDef, errorLabel, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "error", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character errorWithBindValues(ObjectResponse objectResponse, java.lang.String errorLabel,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.errorWithBindValues(objectResponse, errorLabel, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "error", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character error(ObjectResponse objectResponse, java.lang.String errorLabel, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.error(objectResponse, errorLabel, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getErrorResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getErrorResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getErrorGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getErrorGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "aBreak", graphQLTypeSimpleName = "break", javaClass = _break.class)
	public _break aBreakWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.aBreakWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "aBreak", graphQLTypeSimpleName = "break", javaClass = _break.class)
	public _break aBreak(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.aBreak(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "aBreak", graphQLTypeSimpleName = "break", javaClass = _break.class)
	public _break aBreakWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super.aBreakWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "aBreak", graphQLTypeSimpleName = "break", javaClass = _break.class)
	public _break aBreak(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.aBreak(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getABreakResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getABreakResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getABreakGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getABreakGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "directiveOnQuery", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public List<java.lang.String> directiveOnQueryWithBindValues(String queryResponseDef, java.lang.Boolean uppercase,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.directiveOnQueryWithBindValues(queryResponseDef, uppercase, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "directiveOnQuery", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public List<java.lang.String> directiveOnQuery(String queryResponseDef, java.lang.Boolean uppercase,
			Object... paramsAndValues) throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.directiveOnQuery(queryResponseDef, uppercase, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "directiveOnQuery", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public List<java.lang.String> directiveOnQueryWithBindValues(ObjectResponse objectResponse,
			java.lang.Boolean uppercase, Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.directiveOnQueryWithBindValues(objectResponse, uppercase, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "directiveOnQuery", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public List<java.lang.String> directiveOnQuery(ObjectResponse objectResponse, java.lang.Boolean uppercase,
			Object... paramsAndValues) throws GraphQLRequestExecutionException {
		return super.directiveOnQuery(objectResponse, uppercase, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getDirectiveOnQueryResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getDirectiveOnQueryResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getDirectiveOnQueryGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getDirectiveOnQueryGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "directiveOnField", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character directiveOnFieldWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.directiveOnFieldWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "directiveOnField", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character directiveOnField(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.directiveOnField(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "directiveOnField", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character directiveOnFieldWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super.directiveOnFieldWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "directiveOnField", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character directiveOnField(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.directiveOnField(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getDirectiveOnFieldResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getDirectiveOnFieldResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getDirectiveOnFieldGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getDirectiveOnFieldGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "connectionWithoutParameters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> connectionWithoutParametersWithBindValues(String queryResponseDef,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.connectionWithoutParametersWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "connectionWithoutParameters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> connectionWithoutParameters(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.connectionWithoutParameters(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "connectionWithoutParameters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> connectionWithoutParametersWithBindValues(ObjectResponse objectResponse,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.connectionWithoutParametersWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "connectionWithoutParameters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> connectionWithoutParameters(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.connectionWithoutParameters(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getConnectionWithoutParametersResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getConnectionWithoutParametersResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getConnectionWithoutParametersGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getConnectionWithoutParametersGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "connectionOnHuman", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	public List<Human> connectionOnHumanWithBindValues(String queryResponseDef, java.lang.String planet,
			Episode episode, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.connectionOnHumanWithBindValues(queryResponseDef, planet, episode, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "connectionOnHuman", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	public List<Human> connectionOnHuman(String queryResponseDef, java.lang.String planet, Episode episode,
			Object... paramsAndValues) throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.connectionOnHuman(queryResponseDef, planet, episode, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "connectionOnHuman", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	public List<Human> connectionOnHumanWithBindValues(ObjectResponse objectResponse, java.lang.String planet,
			Episode episode, Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.connectionOnHumanWithBindValues(objectResponse, planet, episode, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "connectionOnHuman", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	public List<Human> connectionOnHuman(ObjectResponse objectResponse, java.lang.String planet, Episode episode,
			Object... paramsAndValues) throws GraphQLRequestExecutionException {
		return super.connectionOnHuman(objectResponse, planet, episode, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getConnectionOnHumanResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getConnectionOnHumanResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getConnectionOnHumanGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getConnectionOnHumanGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "issue53", graphQLTypeSimpleName = "Date", javaClass = java.util.Date.class)
	public java.util.Date issue53WithBindValues(String queryResponseDef, java.util.Date date,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.issue53WithBindValues(queryResponseDef, date, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "issue53", graphQLTypeSimpleName = "Date", javaClass = java.util.Date.class)
	public java.util.Date issue53(String queryResponseDef, java.util.Date date, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.issue53(queryResponseDef, date, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "issue53", graphQLTypeSimpleName = "Date", javaClass = java.util.Date.class)
	public java.util.Date issue53WithBindValues(ObjectResponse objectResponse, java.util.Date date,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.issue53WithBindValues(objectResponse, date, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "issue53", graphQLTypeSimpleName = "Date", javaClass = java.util.Date.class)
	public java.util.Date issue53(ObjectResponse objectResponse, java.util.Date date, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.issue53(objectResponse, date, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getIssue53ResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getIssue53ResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getIssue53GraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getIssue53GraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "issue82Float", graphQLTypeSimpleName = "Float", javaClass = java.lang.Double.class)
	public java.lang.Double issue82FloatWithBindValues(String queryResponseDef, java.lang.Double aFloat,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.issue82FloatWithBindValues(queryResponseDef, aFloat, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "issue82Float", graphQLTypeSimpleName = "Float", javaClass = java.lang.Double.class)
	public java.lang.Double issue82Float(String queryResponseDef, java.lang.Double aFloat, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.issue82Float(queryResponseDef, aFloat, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "issue82Float", graphQLTypeSimpleName = "Float", javaClass = java.lang.Double.class)
	public java.lang.Double issue82FloatWithBindValues(ObjectResponse objectResponse, java.lang.Double aFloat,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.issue82FloatWithBindValues(objectResponse, aFloat, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "issue82Float", graphQLTypeSimpleName = "Float", javaClass = java.lang.Double.class)
	public java.lang.Double issue82Float(ObjectResponse objectResponse, java.lang.Double aFloat,
			Object... paramsAndValues) throws GraphQLRequestExecutionException {
		return super.issue82Float(objectResponse, aFloat, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getIssue82FloatResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getIssue82FloatResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getIssue82FloatGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getIssue82FloatGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "issue82ID", graphQLTypeSimpleName = "ID", javaClass = java.lang.String.class)
	public java.lang.String issue82IDWithBindValues(String queryResponseDef, java.lang.String aID,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.issue82IDWithBindValues(queryResponseDef, aID, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "issue82ID", graphQLTypeSimpleName = "ID", javaClass = java.lang.String.class)
	public java.lang.String issue82ID(String queryResponseDef, java.lang.String aID, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.issue82ID(queryResponseDef, aID, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "issue82ID", graphQLTypeSimpleName = "ID", javaClass = java.lang.String.class)
	public java.lang.String issue82IDWithBindValues(ObjectResponse objectResponse, java.lang.String aID,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.issue82IDWithBindValues(objectResponse, aID, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "issue82ID", graphQLTypeSimpleName = "ID", javaClass = java.lang.String.class)
	public java.lang.String issue82ID(ObjectResponse objectResponse, java.lang.String aID, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.issue82ID(objectResponse, aID, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getIssue82IDResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getIssue82IDResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getIssue82IDGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getIssue82IDGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "issue128", graphQLTypeSimpleName = "Client", javaClass = Client.class)
	public Client issue128WithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.issue128WithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "issue128", graphQLTypeSimpleName = "Client", javaClass = Client.class)
	public Client issue128(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.issue128(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "issue128", graphQLTypeSimpleName = "Client", javaClass = Client.class)
	public Client issue128WithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super.issue128WithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "issue128", graphQLTypeSimpleName = "Client", javaClass = Client.class)
	public Client issue128(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.issue128(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getIssue128ResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getIssue128ResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getIssue128GraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getIssue128GraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "enumWithReservedJavaKeywordAsValues", graphQLTypeSimpleName = "EnumWithReservedJavaKeywordAsValues", javaClass = EnumWithReservedJavaKeywordAsValues.class)
	public EnumWithReservedJavaKeywordAsValues enumWithReservedJavaKeywordAsValuesWithBindValues(
			String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.enumWithReservedJavaKeywordAsValuesWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "enumWithReservedJavaKeywordAsValues", graphQLTypeSimpleName = "EnumWithReservedJavaKeywordAsValues", javaClass = EnumWithReservedJavaKeywordAsValues.class)
	public EnumWithReservedJavaKeywordAsValues enumWithReservedJavaKeywordAsValues(String queryResponseDef,
			Object... paramsAndValues) throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.enumWithReservedJavaKeywordAsValues(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "enumWithReservedJavaKeywordAsValues", graphQLTypeSimpleName = "EnumWithReservedJavaKeywordAsValues", javaClass = EnumWithReservedJavaKeywordAsValues.class)
	public EnumWithReservedJavaKeywordAsValues enumWithReservedJavaKeywordAsValuesWithBindValues(
			ObjectResponse objectResponse, Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.enumWithReservedJavaKeywordAsValuesWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "enumWithReservedJavaKeywordAsValues", graphQLTypeSimpleName = "EnumWithReservedJavaKeywordAsValues", javaClass = EnumWithReservedJavaKeywordAsValues.class)
	public EnumWithReservedJavaKeywordAsValues enumWithReservedJavaKeywordAsValues(ObjectResponse objectResponse,
			Object... paramsAndValues) throws GraphQLRequestExecutionException {
		return super.enumWithReservedJavaKeywordAsValues(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getEnumWithReservedJavaKeywordAsValuesResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getEnumWithReservedJavaKeywordAsValuesResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getEnumWithReservedJavaKeywordAsValuesGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getEnumWithReservedJavaKeywordAsValuesGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "listOfEnumWithReservedJavaKeywordAsValues", graphQLTypeSimpleName = "EnumWithReservedJavaKeywordAsValues", javaClass = EnumWithReservedJavaKeywordAsValues.class)
	public List<EnumWithReservedJavaKeywordAsValues> listOfEnumWithReservedJavaKeywordAsValuesWithBindValues(
			String queryResponseDef, EnumWithReservedJavaKeywordAsValues param1,
			List<EnumWithReservedJavaKeywordAsValues> param2, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.listOfEnumWithReservedJavaKeywordAsValuesWithBindValues(queryResponseDef, param1, param2,
				parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "listOfEnumWithReservedJavaKeywordAsValues", graphQLTypeSimpleName = "EnumWithReservedJavaKeywordAsValues", javaClass = EnumWithReservedJavaKeywordAsValues.class)
	public List<EnumWithReservedJavaKeywordAsValues> listOfEnumWithReservedJavaKeywordAsValues(String queryResponseDef,
			EnumWithReservedJavaKeywordAsValues param1, List<EnumWithReservedJavaKeywordAsValues> param2,
			Object... paramsAndValues) throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.listOfEnumWithReservedJavaKeywordAsValues(queryResponseDef, param1, param2, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "listOfEnumWithReservedJavaKeywordAsValues", graphQLTypeSimpleName = "EnumWithReservedJavaKeywordAsValues", javaClass = EnumWithReservedJavaKeywordAsValues.class)
	public List<EnumWithReservedJavaKeywordAsValues> listOfEnumWithReservedJavaKeywordAsValuesWithBindValues(
			ObjectResponse objectResponse, EnumWithReservedJavaKeywordAsValues param1,
			List<EnumWithReservedJavaKeywordAsValues> param2, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super.listOfEnumWithReservedJavaKeywordAsValuesWithBindValues(objectResponse, param1, param2,
				parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "listOfEnumWithReservedJavaKeywordAsValues", graphQLTypeSimpleName = "EnumWithReservedJavaKeywordAsValues", javaClass = EnumWithReservedJavaKeywordAsValues.class)
	public List<EnumWithReservedJavaKeywordAsValues> listOfEnumWithReservedJavaKeywordAsValues(
			ObjectResponse objectResponse, EnumWithReservedJavaKeywordAsValues param1,
			List<EnumWithReservedJavaKeywordAsValues> param2, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.listOfEnumWithReservedJavaKeywordAsValues(objectResponse, param1, param2, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getListOfEnumWithReservedJavaKeywordAsValuesResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getListOfEnumWithReservedJavaKeywordAsValuesResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getListOfEnumWithReservedJavaKeywordAsValuesGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getListOfEnumWithReservedJavaKeywordAsValuesGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "if", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _ifWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._ifWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "if", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _if(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._if(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "if", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _ifWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._ifWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "if", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _if(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._if(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getIfResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getIfResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getIfGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getIfGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "implements", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _implementsWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._implementsWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "implements", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _implements(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._implements(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "implements", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _implementsWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._implementsWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "implements", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _implements(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._implements(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getImplementsResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getImplementsResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getImplementsGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getImplementsGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "import", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _importWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._importWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "import", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _import(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._import(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "import", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _importWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._importWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "import", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _import(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._import(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getImportResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getImportResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getImportGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getImportGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "instanceof", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _instanceofWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._instanceofWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "instanceof", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _instanceof(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._instanceof(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "instanceof", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _instanceofWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._instanceofWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "instanceof", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _instanceof(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._instanceof(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getInstanceofResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getInstanceofResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getInstanceofGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getInstanceofGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "int", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _intWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._intWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "int", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _int(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._int(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "int", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _intWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._intWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "int", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _int(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._int(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getIntResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getIntResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getIntGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getIntGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "interface", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _interfaceWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._interfaceWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "interface", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _interface(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._interface(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "interface", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _interfaceWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._interfaceWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "interface", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _interface(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._interface(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getInterfaceResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getInterfaceResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getInterfaceGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getInterfaceGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "long", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _longWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._longWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "long", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _long(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._long(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "long", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _longWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._longWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "long", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _long(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._long(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getLongResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getLongResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getLongGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getLongGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "native", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _nativeWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._nativeWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "native", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _native(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._native(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "native", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _nativeWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._nativeWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "native", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _native(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._native(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getNativeResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getNativeResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getNativeGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getNativeGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "new", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _newWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._newWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "new", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _new(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._new(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "new", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _newWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._newWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "new", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _new(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._new(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getNewResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getNewResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getNewGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getNewGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "package", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _packageWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._packageWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "package", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _package(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._package(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "package", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _packageWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._packageWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "package", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _package(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._package(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getPackageResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getPackageResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getPackageGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getPackageGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "private", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _privateWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._privateWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "private", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _private(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._private(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "private", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _privateWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._privateWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "private", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _private(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._private(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getPrivateResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getPrivateResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getPrivateGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getPrivateGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "protected", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _protectedWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._protectedWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "protected", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _protected(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._protected(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "protected", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _protectedWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._protectedWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "protected", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _protected(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._protected(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getProtectedResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getProtectedResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getProtectedGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getProtectedGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "public", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _publicWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._publicWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "public", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _public(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._public(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "public", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _publicWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._publicWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "public", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _public(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._public(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getPublicResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getPublicResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getPublicGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getPublicGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "return", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _returnWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._returnWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "return", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _return(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._return(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "return", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _returnWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._returnWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "return", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _return(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._return(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getReturnResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getReturnResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getReturnGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getReturnGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "short", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _shortWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._shortWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "short", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _short(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._short(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "short", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _shortWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._shortWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "short", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _short(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._short(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getShortResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getShortResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getShortGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getShortGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "static", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _staticWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._staticWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "static", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _static(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._static(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "static", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _staticWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._staticWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "static", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _static(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._static(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getStaticResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getStaticResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getStaticGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getStaticGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "strictfp", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _strictfpWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._strictfpWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "strictfp", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _strictfp(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._strictfp(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "strictfp", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _strictfpWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._strictfpWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "strictfp", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _strictfp(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._strictfp(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getStrictfpResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getStrictfpResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getStrictfpGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getStrictfpGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "super", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _superWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._superWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "super", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _super(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._super(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "super", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _superWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._superWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "super", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _super(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._super(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getSuperResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getSuperResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getSuperGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getSuperGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "switch", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _switchWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._switchWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "switch", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _switch(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._switch(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "switch", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _switchWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._switchWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "switch", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _switch(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._switch(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getSwitchResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getSwitchResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getSwitchGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getSwitchGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "synchronized", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _synchronizedWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._synchronizedWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "synchronized", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _synchronized(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._synchronized(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "synchronized", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _synchronizedWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._synchronizedWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "synchronized", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _synchronized(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._synchronized(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getSynchronizedResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getSynchronizedResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getSynchronizedGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return super.getSynchronizedGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "this", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _thisWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._thisWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "this", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _this(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._this(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "this", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _thisWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._thisWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "this", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _this(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._this(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getThisResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getThisResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getThisGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getThisGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "throw", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _throwWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._throwWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "throw", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _throw(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._throw(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "throw", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _throwWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._throwWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "throw", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _throw(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._throw(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getThrowResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getThrowResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getThrowGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getThrowGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "throws", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _throwsWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._throwsWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "throws", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _throws(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._throws(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "throws", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _throwsWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._throwsWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "throws", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _throws(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._throws(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getThrowsResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getThrowsResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getThrowsGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getThrowsGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "transient", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _transientWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._transientWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "transient", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _transient(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._transient(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "transient", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _transientWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._transientWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "transient", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _transient(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._transient(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getTransientResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getTransientResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getTransientGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getTransientGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "try", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _tryWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._tryWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "try", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _try(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._try(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "try", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _tryWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._tryWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "try", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _try(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._try(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getTryResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getTryResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getTryGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getTryGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "void", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _voidWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._voidWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "void", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _void(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._void(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "void", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _voidWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._voidWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "void", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _void(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._void(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getVoidResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getVoidResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getVoidGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getVoidGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "volatile", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _volatileWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._volatileWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "volatile", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _volatile(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._volatile(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "volatile", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _volatileWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._volatileWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "volatile", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _volatile(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._volatile(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getVolatileResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getVolatileResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getVolatileGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getVolatileGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "while", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _whileWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._whileWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "while", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _while(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super._while(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "while", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _whileWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super._whileWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "while", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String _while(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super._while(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getWhileResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getWhileResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getWhileGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getWhileGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "foo140", graphQLTypeSimpleName = "Foo140", javaClass = Foo140.class)
	public Foo140 foo140WithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.foo140WithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "foo140", graphQLTypeSimpleName = "Foo140", javaClass = Foo140.class)
	public Foo140 foo140(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.foo140(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "foo140", graphQLTypeSimpleName = "Foo140", javaClass = Foo140.class)
	public Foo140 foo140WithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super.foo140WithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "foo140", graphQLTypeSimpleName = "Foo140", javaClass = Foo140.class)
	public Foo140 foo140(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.foo140(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getFoo140ResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getFoo140ResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getFoo140GraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getFoo140GraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "relay", graphQLTypeSimpleName = "MyQueryType", javaClass = MyQueryType.class)
	public MyQueryType relayWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.relayWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "relay", graphQLTypeSimpleName = "MyQueryType", javaClass = MyQueryType.class)
	public MyQueryType relay(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.relay(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "relay", graphQLTypeSimpleName = "MyQueryType", javaClass = MyQueryType.class)
	public MyQueryType relayWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super.relayWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "relay", graphQLTypeSimpleName = "MyQueryType", javaClass = MyQueryType.class)
	public MyQueryType relay(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.relay(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getRelayResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.getRelayResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest getRelayGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getRelayGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "__schema", graphQLTypeSimpleName = "__Schema", javaClass = __Schema.class)
	public __Schema __schemaWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.__schemaWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "__schema", graphQLTypeSimpleName = "__Schema", javaClass = __Schema.class)
	public __Schema __schema(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.__schema(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "__schema", graphQLTypeSimpleName = "__Schema", javaClass = __Schema.class)
	public __Schema __schemaWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super.__schemaWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "__schema", graphQLTypeSimpleName = "__Schema", javaClass = __Schema.class)
	public __Schema __schema(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.__schema(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder get__schemaResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.get__schemaResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest get__schemaGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.get__schemaGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "__type", graphQLTypeSimpleName = "__Type", javaClass = __Type.class)
	public __Type __typeWithBindValues(String queryResponseDef, java.lang.String name, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.__typeWithBindValues(queryResponseDef, name, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "__type", graphQLTypeSimpleName = "__Type", javaClass = __Type.class)
	public __Type __type(String queryResponseDef, java.lang.String name, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.__type(queryResponseDef, name, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "__type", graphQLTypeSimpleName = "__Type", javaClass = __Type.class)
	public __Type __typeWithBindValues(ObjectResponse objectResponse, java.lang.String name,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		return super.__typeWithBindValues(objectResponse, name, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLNonScalar(fieldName = "__type", graphQLTypeSimpleName = "__Type", javaClass = __Type.class)
	public __Type __type(ObjectResponse objectResponse, java.lang.String name, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.__type(objectResponse, name, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder get__typeResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.get__typeResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest get__typeGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.get__typeGraphQLRequest(partialRequest);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String __typenameWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.__typenameWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String __typename(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.__typename(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String __typenameWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super.__typenameWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	public java.lang.String __typename(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.__typename(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder get__typenameResponseBuilder()
			throws GraphQLRequestPreparationException {
		return super.get__typenameResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link MyQueryTypeExecutor} class instead of this class, to execute this
	 * method. It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0
	 * version.
	 */
	@Deprecated
	public GraphQLRequest get__typenameGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.get__typenameGraphQLRequest(partialRequest);
	}

}
